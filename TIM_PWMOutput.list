
TIM_PWMOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000449c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046dc  080046dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046dc  080046dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046dc  080046dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08004754  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004754  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000e18a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000083  00000000  00000000  0002e26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000c2aa  00000000  00000000  0002e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001edb  00000000  00000000  0003a59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d60  00000000  00000000  0003c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7023  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000a3e  00000000  00000000  001041fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001ed28  00000000  00000000  00104c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f4c  00000000  00000000  00123964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004664 	.word	0x08004664

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004664 	.word	0x08004664

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	; (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	; (800030c <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ea:	f000 fdef 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ee:	f003 fc83 	bl	8003bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002f2:	f000 f9c9 	bl	8000688 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000304:	080046e4 	.word	0x080046e4
  ldr r2, =_sbss
 8000308:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800030c:	200002f0 	.word	0x200002f0

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint32_t counter1;
int sek, milli_in_sek;
bool counter_signal;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	// check if TIMER x is the one responsible the interrupts
	if(htim->Instance == TIM17){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d135      	bne.n	8000392 <HAL_TIM_PeriodElapsedCallback+0x7e>
		millis++; // Increment milliseconds counter
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	4a20      	ldr	r2, [pc, #128]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800032e:	6013      	str	r3, [r2, #0]
		millis2++;
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a1f      	ldr	r2, [pc, #124]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000338:	6013      	str	r3, [r2, #0]
		counter1++;
 800033a:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3301      	adds	r3, #1
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000342:	6013      	str	r3, [r2, #0]
		interrupt_flag = 1;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
		milli_in_sek++;
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000352:	6013      	str	r3, [r2, #0]
		if (milli_in_sek == 1000) {
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800035c:	d107      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x5a>
			sek++;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3301      	adds	r3, #1
 8000364:	4a17      	ldr	r2, [pc, #92]	; (80003c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000366:	6013      	str	r3, [r2, #0]
			milli_in_sek = 0;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	4815      	ldr	r0, [pc, #84]	; (80003c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000374:	f001 f8c2 	bl	80014fc <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b01      	cmp	r3, #1
 800037c:	d106      	bne.n	800038c <HAL_TIM_PeriodElapsedCallback+0x78>
			printf("millisec: %lu\n ", millis);
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4811      	ldr	r0, [pc, #68]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000386:	f003 fa9d 	bl	80038c4 <iprintf>
 800038a:	e002      	b.n	8000392 <HAL_TIM_PeriodElapsedCallback+0x7e>
		} else {
			printf("LED OFF \r\n");
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800038e:	f003 faff 	bl	8003990 <puts>
		}
		// Read button state using HAL function
	}
	if(htim->Instance == TIM3){
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a0f      	ldr	r2, [pc, #60]	; (80003d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d102      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x8e>
		counter_signal = true;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
	}
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40014800 	.word	0x40014800
 80003b0:	20000170 	.word	0x20000170
 80003b4:	20000174 	.word	0x20000174
 80003b8:	20000180 	.word	0x20000180
 80003bc:	2000017c 	.word	0x2000017c
 80003c0:	20000188 	.word	0x20000188
 80003c4:	20000184 	.word	0x20000184
 80003c8:	48000800 	.word	0x48000800
 80003cc:	0800467c 	.word	0x0800467c
 80003d0:	0800468c 	.word	0x0800468c
 80003d4:	40000400 	.word	0x40000400
 80003d8:	2000018c 	.word	0x2000018c

080003dc <PWM_Function>:
bool direction = true;
bool pwm_direct = true;
int pwm_cycle;


void PWM_Function() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	interrupt_flag = 0;
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <PWM_Function+0xd8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
	buttonFlag = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET);
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	4833      	ldr	r0, [pc, #204]	; (80004b8 <PWM_Function+0xdc>)
 80003ec:	f001 f886 	bl	80014fc <HAL_GPIO_ReadPin>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	bf0c      	ite	eq
 80003f6:	2301      	moveq	r3, #1
 80003f8:	2300      	movne	r3, #0
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <PWM_Function+0xe0>)
 8000400:	601a      	str	r2, [r3, #0]
	if (counter1 > DELAY && buttonFlag) {
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <PWM_Function+0xe4>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b19      	cmp	r3, #25
 8000408:	d952      	bls.n	80004b0 <PWM_Function+0xd4>
 800040a:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <PWM_Function+0xe0>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d04e      	beq.n	80004b0 <PWM_Function+0xd4>
		counter1 = 0;
 8000412:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <PWM_Function+0xe4>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <PWM_Function+0xe8>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <PWM_Function+0xec>)
 800041e:	6812      	ldr	r2, [r2, #0]
 8000420:	fb03 f202 	mul.w	r2, r3, r2
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <PWM_Function+0xe8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4928      	ldr	r1, [pc, #160]	; (80004cc <PWM_Function+0xf0>)
 800042a:	fba1 1202 	umull	r1, r2, r1, r2
 800042e:	0952      	lsrs	r2, r2, #5
 8000430:	635a      	str	r2, [r3, #52]	; 0x34
		(htim1.Init.Period) * pwm_cycle / 100);
		if (pwm_cycle < 100 && pwm_direct == true) {
 8000432:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <PWM_Function+0xec>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b63      	cmp	r3, #99	; 0x63
 8000438:	dc0c      	bgt.n	8000454 <PWM_Function+0x78>
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <PWM_Function+0xf4>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d008      	beq.n	8000454 <PWM_Function+0x78>
			pwm_cycle++;
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <PWM_Function+0xec>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	3301      	adds	r3, #1
 8000448:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <PWM_Function+0xec>)
 800044a:	6013      	str	r3, [r2, #0]
			pwm_direct = true;
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <PWM_Function+0xf4>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	e02d      	b.n	80004b0 <PWM_Function+0xd4>
		}
		else if (pwm_cycle > 0 && pwm_direct == false) {
 8000454:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <PWM_Function+0xec>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	dd0f      	ble.n	800047c <PWM_Function+0xa0>
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <PWM_Function+0xf4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	f083 0301 	eor.w	r3, r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <PWM_Function+0xa0>
			pwm_cycle--;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <PWM_Function+0xec>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <PWM_Function+0xec>)
 8000472:	6013      	str	r3, [r2, #0]
			pwm_direct = false;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <PWM_Function+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e019      	b.n	80004b0 <PWM_Function+0xd4>
		}
		else if (pwm_cycle == 100) {
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <PWM_Function+0xec>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b64      	cmp	r3, #100	; 0x64
 8000482:	d108      	bne.n	8000496 <PWM_Function+0xba>
			pwm_cycle--;
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <PWM_Function+0xec>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3b01      	subs	r3, #1
 800048a:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <PWM_Function+0xec>)
 800048c:	6013      	str	r3, [r2, #0]
			pwm_direct = false;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <PWM_Function+0xf4>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
			pwm_cycle++;
			pwm_direct = true;
		}

	}
}
 8000494:	e00c      	b.n	80004b0 <PWM_Function+0xd4>
		else if (pwm_cycle == 0) {
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <PWM_Function+0xec>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d108      	bne.n	80004b0 <PWM_Function+0xd4>
			pwm_cycle++;
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <PWM_Function+0xec>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <PWM_Function+0xec>)
 80004a6:	6013      	str	r3, [r2, #0]
			pwm_direct = true;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <PWM_Function+0xf4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
}
 80004ae:	e7ff      	b.n	80004b0 <PWM_Function+0xd4>
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000017c 	.word	0x2000017c
 80004b8:	48000800 	.word	0x48000800
 80004bc:	20000178 	.word	0x20000178
 80004c0:	20000180 	.word	0x20000180
 80004c4:	2000008c 	.word	0x2000008c
 80004c8:	20000190 	.word	0x20000190
 80004cc:	51eb851f 	.word	0x51eb851f
 80004d0:	20000000 	.word	0x20000000

080004d4 <stepper_half_drive>:
	else{
		return;
	}
}

void stepper_half_drive (int step) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	switch (step) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b07      	cmp	r3, #7
 80004e0:	f200 80cc 	bhi.w	800067c <stepper_half_drive+0x1a8>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <stepper_half_drive+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	0800050d 	.word	0x0800050d
 80004f0:	0800053b 	.word	0x0800053b
 80004f4:	08000569 	.word	0x08000569
 80004f8:	08000597 	.word	0x08000597
 80004fc:	080005c5 	.word	0x080005c5
 8000500:	080005f3 	.word	0x080005f3
 8000504:	08000621 	.word	0x08000621
 8000508:	0800064f 	.word	0x0800064f
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 f809 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2108      	movs	r1, #8
 800051e:	4859      	ldr	r0, [pc, #356]	; (8000684 <stepper_half_drive+0x1b0>)
 8000520:	f001 f804 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	4856      	ldr	r0, [pc, #344]	; (8000684 <stepper_half_drive+0x1b0>)
 800052a:	f000 ffff 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2110      	movs	r1, #16
 8000532:	4854      	ldr	r0, [pc, #336]	; (8000684 <stepper_half_drive+0x1b0>)
 8000534:	f000 fffa 	bl	800152c <HAL_GPIO_WritePin>
		break;
 8000538:	e0a0      	b.n	800067c <stepper_half_drive+0x1a8>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fff2 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2108      	movs	r1, #8
 800054c:	484d      	ldr	r0, [pc, #308]	; (8000684 <stepper_half_drive+0x1b0>)
 800054e:	f000 ffed 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	484b      	ldr	r0, [pc, #300]	; (8000684 <stepper_half_drive+0x1b0>)
 8000558:	f000 ffe8 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2110      	movs	r1, #16
 8000560:	4848      	ldr	r0, [pc, #288]	; (8000684 <stepper_half_drive+0x1b0>)
 8000562:	f000 ffe3 	bl	800152c <HAL_GPIO_WritePin>
		break;
 8000566:	e089      	b.n	800067c <stepper_half_drive+0x1a8>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f000 ffdb 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2108      	movs	r1, #8
 800057a:	4842      	ldr	r0, [pc, #264]	; (8000684 <stepper_half_drive+0x1b0>)
 800057c:	f000 ffd6 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2120      	movs	r1, #32
 8000584:	483f      	ldr	r0, [pc, #252]	; (8000684 <stepper_half_drive+0x1b0>)
 8000586:	f000 ffd1 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	483d      	ldr	r0, [pc, #244]	; (8000684 <stepper_half_drive+0x1b0>)
 8000590:	f000 ffcc 	bl	800152c <HAL_GPIO_WritePin>
		break;
 8000594:	e072      	b.n	800067c <stepper_half_drive+0x1a8>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f000 ffc4 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	4836      	ldr	r0, [pc, #216]	; (8000684 <stepper_half_drive+0x1b0>)
 80005aa:	f000 ffbf 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2120      	movs	r1, #32
 80005b2:	4834      	ldr	r0, [pc, #208]	; (8000684 <stepper_half_drive+0x1b0>)
 80005b4:	f000 ffba 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	4831      	ldr	r0, [pc, #196]	; (8000684 <stepper_half_drive+0x1b0>)
 80005be:	f000 ffb5 	bl	800152c <HAL_GPIO_WritePin>
		break;
 80005c2:	e05b      	b.n	800067c <stepper_half_drive+0x1a8>
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f000 ffad 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	482b      	ldr	r0, [pc, #172]	; (8000684 <stepper_half_drive+0x1b0>)
 80005d8:	f000 ffa8 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	4828      	ldr	r0, [pc, #160]	; (8000684 <stepper_half_drive+0x1b0>)
 80005e2:	f000 ffa3 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2110      	movs	r1, #16
 80005ea:	4826      	ldr	r0, [pc, #152]	; (8000684 <stepper_half_drive+0x1b0>)
 80005ec:	f000 ff9e 	bl	800152c <HAL_GPIO_WritePin>
		break;
 80005f0:	e044      	b.n	800067c <stepper_half_drive+0x1a8>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 ff96 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2108      	movs	r1, #8
 8000604:	481f      	ldr	r0, [pc, #124]	; (8000684 <stepper_half_drive+0x1b0>)
 8000606:	f000 ff91 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2120      	movs	r1, #32
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <stepper_half_drive+0x1b0>)
 8000610:	f000 ff8c 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <stepper_half_drive+0x1b0>)
 800061a:	f000 ff87 	bl	800152c <HAL_GPIO_WritePin>
		break;
 800061e:	e02d      	b.n	800067c <stepper_half_drive+0x1a8>
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f000 ff7f 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <stepper_half_drive+0x1b0>)
 8000634:	f000 ff7a 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2120      	movs	r1, #32
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <stepper_half_drive+0x1b0>)
 800063e:	f000 ff75 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2110      	movs	r1, #16
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <stepper_half_drive+0x1b0>)
 8000648:	f000 ff70 	bl	800152c <HAL_GPIO_WritePin>
		break;
 800064c:	e016      	b.n	800067c <stepper_half_drive+0x1a8>
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 ff68 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2108      	movs	r1, #8
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <stepper_half_drive+0x1b0>)
 8000662:	f000 ff63 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <stepper_half_drive+0x1b0>)
 800066c:	f000 ff5e 	bl	800152c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <stepper_half_drive+0x1b0>)
 8000676:	f000 ff59 	bl	800152c <HAL_GPIO_WritePin>
		break;
 800067a:	bf00      	nop
	}
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000400 	.word	0x48000400

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fc34 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f85c 	bl	800074c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fbcd 	bl	8000e34 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f9ab 	bl	80009f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800069e:	f000 f8a1 	bl	80007e4 <MX_TIM1_Init>
  MX_TIM17_Init();
 80006a2:	f000 f981 	bl	80009a8 <MX_TIM17_Init>
  MX_TIM3_Init();
 80006a6:	f000 f931 	bl	800090c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

/*## Start PWM signals generation #######################################*/
  /* Start channel 1 */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4820      	ldr	r0, [pc, #128]	; (8000730 <main+0xa8>)
 80006ae:	f001 fe19 	bl	80022e4 <HAL_TIM_PWM_Start>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0x34>
  {
    /* PWM Generation Error */
    Error_Handler();
 80006b8:	f000 fa18 	bl	8000aec <Error_Handler>
  }

	HAL_TIM_Base_Init(&htim1);
 80006bc:	481c      	ldr	r0, [pc, #112]	; (8000730 <main+0xa8>)
 80006be:	f001 fcf7 	bl	80020b0 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim17);
 80006c2:	481c      	ldr	r0, [pc, #112]	; (8000734 <main+0xac>)
 80006c4:	f001 fd4c 	bl	8002160 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <main+0xb0>)
 80006ca:	f001 fd49 	bl	8002160 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	4817      	ldr	r0, [pc, #92]	; (8000730 <main+0xa8>)
 80006d2:	f001 fe07 	bl	80022e4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	if(interrupt_flag == 1) {
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <main+0xb4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d101      	bne.n	80006e2 <main+0x5a>
		PWM_Function();
 80006de:	f7ff fe7d 	bl	80003dc <PWM_Function>
	}
	if(counter_signal) {
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <main+0xb8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f5      	beq.n	80006d6 <main+0x4e>
		counter_signal = false;
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <main+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
		if (period < 9) {
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <main+0xbc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	dc12      	bgt.n	800071e <main+0x96>
			period ++;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <main+0xbc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <main+0xbc>)
 8000700:	6013      	str	r3, [r2, #0]
			if(halfstep < 8){
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <main+0xc0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b07      	cmp	r3, #7
 8000708:	dc05      	bgt.n	8000716 <main+0x8e>

				stepper_half_drive(halfstep);
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <main+0xc0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fee0 	bl	80004d4 <stepper_half_drive>
 8000714:	e7df      	b.n	80006d6 <main+0x4e>
				//stepper_set_rpm(0);
			}
			else {
				halfstep = 0;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <main+0xc0>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	e7db      	b.n	80006d6 <main+0x4e>
			}
		}
		else {
			halfstep ++;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <main+0xc0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <main+0xc0>)
 8000726:	6013      	str	r3, [r2, #0]
			period = 0;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <main+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	if(interrupt_flag == 1) {
 800072e:	e7d2      	b.n	80006d6 <main+0x4e>
 8000730:	2000008c 	.word	0x2000008c
 8000734:	20000124 	.word	0x20000124
 8000738:	200000d8 	.word	0x200000d8
 800073c:	2000017c 	.word	0x2000017c
 8000740:	2000018c 	.word	0x2000018c
 8000744:	20000194 	.word	0x20000194
 8000748:	20000198 	.word	0x20000198

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2238      	movs	r2, #56	; 0x38
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f9f8 	bl	8003b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000772:	f000 fef3 	bl	800155c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800078c:	2301      	movs	r3, #1
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000790:	2309      	movs	r3, #9
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 ff8d 	bl	80016c4 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007b0:	f000 f99c 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2303      	movs	r3, #3
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2102      	movs	r1, #2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fa8b 	bl	8001ce8 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d8:	f000 f988 	bl	8000aec <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b098      	sub	sp, #96	; 0x60
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2234      	movs	r2, #52	; 0x34
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f003 f99d 	bl	8003b50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <MX_TIM1_Init+0x120>)
 8000818:	4a3b      	ldr	r2, [pc, #236]	; (8000908 <MX_TIM1_Init+0x124>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800081c:	4b39      	ldr	r3, [pc, #228]	; (8000904 <MX_TIM1_Init+0x120>)
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <MX_TIM1_Init+0x120>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 42499;
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MX_TIM1_Init+0x120>)
 800082a:	f24a 6203 	movw	r2, #42499	; 0xa603
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_TIM1_Init+0x120>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MX_TIM1_Init+0x120>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <MX_TIM1_Init+0x120>)
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000842:	4830      	ldr	r0, [pc, #192]	; (8000904 <MX_TIM1_Init+0x120>)
 8000844:	f001 fcf6 	bl	8002234 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f94d 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000862:	4619      	mov	r1, r3
 8000864:	4827      	ldr	r0, [pc, #156]	; (8000904 <MX_TIM1_Init+0x120>)
 8000866:	f002 fe17 	bl	8003498 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000870:	f000 f93c 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = PULSE1_VALUE;
 8000878:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000882:	2300      	movs	r3, #0
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_TIM1_Init+0x120>)
 800089c:	f001 ff72 	bl	8002784 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80008a6:	f000 f921 	bl	8000aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_TIM1_Init+0x120>)
 80008e8:	f002 fe58 	bl	800359c <HAL_TIMEx_ConfigBreakDeadTime>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80008f2:	f000 f8fb 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_TIM1_Init+0x120>)
 80008f8:	f000 f98a 	bl	8000c10 <HAL_TIM_MspPostInit>

}
 80008fc:	bf00      	nop
 80008fe:	3760      	adds	r7, #96	; 0x60
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000008c 	.word	0x2000008c
 8000908:	40012c00 	.word	0x40012c00

0800090c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_TIM3_Init+0x94>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <MX_TIM3_Init+0x98>)
 800092e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000932:	2247      	movs	r2, #71	; 0x47
 8000934:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM3_Init+0x94>)
 800093e:	2202      	movs	r2, #2
 8000940:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_TIM3_Init+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094e:	4814      	ldr	r0, [pc, #80]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000950:	f001 fbae 	bl	80020b0 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8c7 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_TIM3_Init+0x94>)
 800096c:	f002 f81e 	bl	80029ac <HAL_TIM_ConfigClockSource>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f8b9 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000988:	f002 fd86 	bl	8003498 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000992:	f000 f8ab 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000d8 	.word	0x200000d8
 80009a4:	40000400 	.word	0x40000400

080009a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_TIM17_Init+0x44>)
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <MX_TIM17_Init+0x48>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 40000-1;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_TIM17_Init+0x44>)
 80009b4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80009b8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_TIM17_Init+0x44>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_TIM17_Init+0x44>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_TIM17_Init+0x44>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_TIM17_Init+0x44>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_TIM17_Init+0x44>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_TIM17_Init+0x44>)
 80009da:	f001 fb69 	bl	80020b0 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009e4:	f000 f882 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000124 	.word	0x20000124
 80009f0:	40014800 	.word	0x40014800

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a34      	ldr	r2, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <MX_GPIO_Init+0xec>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f000 fd5a 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2138      	movs	r1, #56	; 0x38
 8000a7c:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a7e:	f000 fd55 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0xf4>)
 8000a98:	f000 fbae 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 fb9e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000abc:	2338      	movs	r3, #56	; 0x38
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_GPIO_Init+0xf0>)
 8000ad4:	f000 fb90 	bl	80011f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	48000800 	.word	0x48000800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 f9d5 	bl	8000ea0 <BSP_LED_On>
  while(1) 
 8000af6:	e7fe      	b.n	8000af6 <Error_Handler+0xa>

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b2e:	f000 fdb9 	bl	80016a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_TIM_PWM_MspInit+0x44>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d113      	bne.n	8000b7a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_TIM_PWM_MspInit+0x48>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <HAL_TIM_PWM_MspInit+0x48>)
 8000b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_TIM_PWM_MspInit+0x48>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	201a      	movs	r0, #26
 8000b70:	f000 fb0d 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b74:	201a      	movs	r0, #26
 8000b76:	f000 fb24 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <HAL_TIM_Base_MspInit+0x78>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d114      	bne.n	8000bc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_TIM_Base_MspInit+0x7c>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_TIM_Base_MspInit+0x7c>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_TIM_Base_MspInit+0x7c>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201d      	movs	r0, #29
 8000bbc:	f000 fae7 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bc0:	201d      	movs	r0, #29
 8000bc2:	f000 fafe 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bc6:	e018      	b.n	8000bfa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_TIM_Base_MspInit+0x80>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d113      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_TIM_Base_MspInit+0x7c>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <HAL_TIM_Base_MspInit+0x7c>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_Base_MspInit+0x7c>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	201a      	movs	r0, #26
 8000bf0:	f000 facd 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000bf4:	201a      	movs	r0, #26
 8000bf6:	f000 fae4 	bl	80011c2 <HAL_NVIC_EnableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40014800 	.word	0x40014800

08000c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_TIM_MspPostInit+0x68>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d11d      	bne.n	8000c6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_TIM_MspPostInit+0x6c>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <HAL_TIM_MspPostInit+0x6c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_TIM_MspPostInit+0x6c>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f000 fac5 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40012c00 	.word	0x40012c00
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f972 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000cc2:	f001 fc0f 	bl	80024e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000cc6:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000cc8:	f001 fc0c 	bl	80024e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000008c 	.word	0x2000008c
 8000cd4:	20000124 	.word	0x20000124

08000cd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM3_IRQHandler+0x10>)
 8000cde:	f001 fc01 	bl	80024e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000d8 	.word	0x200000d8

08000cec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfe:	f3af 8000 	nop.w
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
  }

  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
  }
  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_isatty>:

int _isatty(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f002 fef8 	bl	8003bec <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20008000 	.word	0x20008000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	2000019c 	.word	0x2000019c
 8000e30:	200002f0 	.word	0x200002f0

08000e34 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <BSP_LED_Init+0x64>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <BSP_LED_Init+0x64>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <BSP_LED_Init+0x64>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000e56:	2320      	movs	r3, #32
 8000e58:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <BSP_LED_Init+0x68>)
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	f107 020c 	add.w	r2, r7, #12
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f9bf 	bl	80011f8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <BSP_LED_Init+0x68>)
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	2120      	movs	r1, #32
 8000e84:	2200      	movs	r2, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fb50 	bl	800152c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <BSP_LED_On+0x28>)
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fb38 	bl	800152c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000004 	.word	0x20000004

08000ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <SystemInit+0x28>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <SystemInit+0x28>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SystemInit+0x28>)
 8000ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f000 f938 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f80d 	bl	8000f28 <HAL_InitTick>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	e001      	b.n	8000f1e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1a:	f7ff fded 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_InitTick+0x68>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d022      	beq.n	8000f82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_InitTick+0x6c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_InitTick+0x68>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f944 	bl	80011de <HAL_SYSTICK_Config>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10f      	bne.n	8000f7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	d809      	bhi.n	8000f76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f62:	2200      	movs	r2, #0
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	f000 f910 	bl	800118e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_InitTick+0x70>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e007      	b.n	8000f86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e004      	b.n	8000f86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e001      	b.n	8000f86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000010 	.word	0x20000010
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x1c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_IncTick+0x1c>)
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	200001a0 	.word	0x200001a0
 8000fbc:	20000010 	.word	0x20000010

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200001a0 	.word	0x200001a0

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff40 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff33 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa4 	bl	8001134 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001206:	e15a      	b.n	80014be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 814c 	beq.w	80014b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 0201 	and.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0203 	and.w	r2, r3, #3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80a6 	beq.w	80014b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6613      	str	r3, [r2, #96]	; 0x60
 8001378:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001384:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ae:	d01f      	beq.n	80013f0 <HAL_GPIO_Init+0x1f8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d019      	beq.n	80013ec <HAL_GPIO_Init+0x1f4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1f0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4a      	ldr	r2, [pc, #296]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1ec>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1e8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1e4>
 80013d8:	2305      	movs	r3, #5
 80013da:	e00a      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013dc:	2306      	movs	r3, #6
 80013de:	e008      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013e4:	2303      	movs	r3, #3
 80013e6:	e004      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013f0:	2300      	movs	r3, #0
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001402:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001434:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <HAL_GPIO_Init+0x300>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f ae9d 	bne.w	8001208 <HAL_GPIO_Init+0x10>
  }
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000c00 	.word	0x48000c00
 80014f0:	48001000 	.word	0x48001000
 80014f4:	48001400 	.word	0x48001400
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001548:	e002      	b.n	8001550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d141      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d131      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	e002      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d102      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f2      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d6:	d158      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e057      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015ec:	e04d      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f4:	d141      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001602:	d131      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800160a:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2232      	movs	r2, #50	; 0x32
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	e002      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b01      	subs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d102      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001662:	d112      	bne.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e011      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001678:	e007      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001688:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40007000 	.word	0x40007000
 800169c:	20000008 	.word	0x20000008
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b2:	6093      	str	r3, [r2, #8]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e2fe      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d075      	beq.n	80017ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e2:	4b97      	ldr	r3, [pc, #604]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ec:	4b94      	ldr	r3, [pc, #592]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x3e>
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d002      	beq.n	8001708 <HAL_RCC_OscConfig+0x44>
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b8d      	ldr	r3, [pc, #564]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d05b      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d157      	bne.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e2d9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x74>
 800172a:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a84      	ldr	r2, [pc, #528]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x98>
 8001742:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7e      	ldr	r2, [pc, #504]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7b      	ldr	r2, [pc, #492]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xb0>
 800175c:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a77      	ldr	r2, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b75      	ldr	r3, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a74      	ldr	r2, [pc, #464]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fc20 	bl	8000fc0 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fc1c 	bl	8000fc0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e29e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xc0>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc0c 	bl	8000fc0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc08 	bl	8000fc0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e28a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d075      	beq.n	80018c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4b56      	ldr	r3, [pc, #344]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x136>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_OscConfig+0x13c>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d11f      	bne.n	8001840 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x154>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e25d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	4946      	ldr	r1, [pc, #280]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb79 	bl	8000f28 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d043      	beq.n	80018c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e249      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fbb4 	bl	8000fc0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff fbb0 	bl	8000fc0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e232      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	061b      	lsls	r3, r3, #24
 8001888:	492d      	ldr	r1, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
 800188e:	e01a      	b.n	80018c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fb90 	bl	8000fc0 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fb8c 	bl	8000fc0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e20e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1e0>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d041      	beq.n	8001956 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01c      	beq.n	8001914 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb69 	bl	8000fc0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb65 	bl	8000fc0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1e7      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ef      	beq.n	80018f2 <HAL_RCC_OscConfig+0x22e>
 8001912:	e020      	b.n	8001956 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_OscConfig+0x27c>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fb4c 	bl	8000fc0 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800192a:	e00d      	b.n	8001948 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fb48 	bl	8000fc0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d906      	bls.n	8001948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1ca      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001948:	4b8c      	ldr	r3, [pc, #560]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ea      	bne.n	800192c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80a6 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_OscConfig+0x2b4>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x2b6>
 8001978:	2300      	movs	r3, #0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00d      	beq.n	800199a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	4a7e      	ldr	r2, [pc, #504]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6593      	str	r3, [r2, #88]	; 0x58
 800198a:	4b7c      	ldr	r3, [pc, #496]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb05 	bl	8000fc0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fb01 	bl	8000fc0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e183      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x4bc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_RCC_OscConfig+0x32e>
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f0:	e024      	b.n	8001a3c <HAL_RCC_OscConfig+0x378>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d110      	bne.n	8001a1c <HAL_RCC_OscConfig+0x358>
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	4a5e      	ldr	r2, [pc, #376]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCC_OscConfig+0x378>
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a56      	ldr	r2, [pc, #344]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d016      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fabc 	bl	8000fc0 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fab8 	bl	8000fc0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e138      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ed      	beq.n	8001a4c <HAL_RCC_OscConfig+0x388>
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff faa5 	bl	8000fc0 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff faa1 	bl	8000fc0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e121      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ed      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01c      	beq.n	8001afe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa74 	bl	8000fc0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001adc:	f7ff fa70 	bl	8000fc0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0f2      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ef      	beq.n	8001adc <HAL_RCC_OscConfig+0x418>
 8001afc:	e01b      	b.n	8001b36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fa57 	bl	8000fc0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b16:	f7ff fa53 	bl	8000fc0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0d5      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80c9 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b0c      	cmp	r3, #12
 8001b4a:	f000 8083 	beq.w	8001c54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d15e      	bne.n	8001c14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fa2d 	bl	8000fc0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e00c      	b.n	8001b84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fa29 	bl	8000fc0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d905      	bls.n	8001b84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0ab      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	4b55      	ldr	r3, [pc, #340]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ec      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_RCC_OscConfig+0x61c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6a11      	ldr	r1, [r2, #32]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba0:	3a01      	subs	r2, #1
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001baa:	0212      	lsls	r2, r2, #8
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bb2:	0852      	lsrs	r2, r2, #1
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	0552      	lsls	r2, r2, #21
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bbe:	0852      	lsrs	r2, r2, #1
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	0652      	lsls	r2, r2, #25
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bca:	06d2      	lsls	r2, r2, #27
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	4943      	ldr	r1, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a40      	ldr	r2, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a3d      	ldr	r2, [pc, #244]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f9e8 	bl	8000fc0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f9e4 	bl	8000fc0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e066      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x530>
 8001c12:	e05e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f9ce 	bl	8000fc0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f9ca 	bl	8000fc0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e04c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	4924      	ldr	r1, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_RCC_OscConfig+0x620>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
 8001c52:	e03e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e039      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_RCC_OscConfig+0x618>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d12c      	bne.n	8001cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d123      	bne.n	8001cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d11b      	bne.n	8001cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d113      	bne.n	8001cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	019f800c 	.word	0x019f800c
 8001ce4:	feeefffc 	.word	0xfeeefffc

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e11e      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d910      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 020f 	bic.w	r2, r3, #15
 8001d16:	498c      	ldr	r1, [pc, #560]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e106      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d073      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d129      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d44:	4b81      	ldr	r3, [pc, #516]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0f4      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d54:	f000 f966 	bl	8002024 <RCC_GetSysClockFreqFromPLLSource>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4a7c      	ldr	r2, [pc, #496]	; (8001f50 <HAL_RCC_ClockConfig+0x268>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d93f      	bls.n	8001de2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d033      	beq.n	8001de2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d12f      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d8a:	4a70      	ldr	r2, [pc, #448]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e024      	b.n	8001de2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0c6      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db0:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0be      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dc0:	f000 f8ce 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <HAL_RCC_ClockConfig+0x268>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d909      	bls.n	8001de2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dce:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dd6:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4957      	ldr	r1, [pc, #348]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff f8e4 	bl	8000fc0 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff f8e0 	bl	8000fc0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e095      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e5c:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4936      	ldr	r1, [pc, #216]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4a32      	ldr	r2, [pc, #200]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d21d      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 020f 	bic.w	r2, r3, #15
 8001ea0:	4929      	ldr	r1, [pc, #164]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff f88a 	bl	8000fc0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff f886 	bl	8000fc0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e03b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1ed      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4917      	ldr	r1, [pc, #92]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	490f      	ldr	r1, [pc, #60]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f12:	f000 f825 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	490c      	ldr	r1, [pc, #48]	; (8001f54 <HAL_RCC_ClockConfig+0x26c>)
 8001f24:	5ccb      	ldrb	r3, [r1, r3]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x270>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fff6 	bl	8000f28 <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	04c4b400 	.word	0x04c4b400
 8001f54:	08004698 	.word	0x08004698
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	2000000c 	.word	0x2000000c

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e047      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e03e      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d136      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3301      	adds	r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	68d2      	ldr	r2, [r2, #12]
 8001fc0:	0a12      	lsrs	r2, r2, #8
 8001fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
      break;
 8001fcc:	e00c      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	0a12      	lsrs	r2, r2, #8
 8001fdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
      break;
 8001fe6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0e5b      	lsrs	r3, r3, #25
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	e001      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002008:	693b      	ldr	r3, [r7, #16]
}
 800200a:	4618      	mov	r0, r3
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	00f42400 	.word	0x00f42400
 8002020:	016e3600 	.word	0x016e3600

08002024 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3301      	adds	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d10c      	bne.n	8002062 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002052:	68d2      	ldr	r2, [r2, #12]
 8002054:	0a12      	lsrs	r2, r2, #8
 8002056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	617b      	str	r3, [r7, #20]
    break;
 8002060:	e00c      	b.n	800207c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800206c:	68d2      	ldr	r2, [r2, #12]
 800206e:	0a12      	lsrs	r2, r2, #8
 8002070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    break;
 800207a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0e5b      	lsrs	r3, r3, #25
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	3301      	adds	r3, #1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002096:	687b      	ldr	r3, [r7, #4]
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40021000 	.word	0x40021000
 80020a8:	016e3600 	.word	0x016e3600
 80020ac:	00f42400 	.word	0x00f42400

080020b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e049      	b.n	8002156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fd58 	bl	8000b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 fd7e 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04a      	b.n	800220e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <HAL_TIM_Base_Start_IT+0xbc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d013      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_TIM_Base_Start_IT+0xc0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_TIM_Base_Start_IT+0xc4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_TIM_Base_Start_IT+0xc8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_TIM_Base_Start_IT+0xcc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d115      	bne.n	80021f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_TIM_Base_Start_IT+0xd0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d015      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xaa>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d011      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	e008      	b.n	800220a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e000      	b.n	800220c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40013400 	.word	0x40013400
 800222c:	40014000 	.word	0x40014000
 8002230:	00010007 	.word	0x00010007

08002234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e049      	b.n	80022da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fc70 	bl	8000b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 fcbc 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_TIM_PWM_Start+0x24>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e03c      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d109      	bne.n	8002322 <HAL_TIM_PWM_Start+0x3e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e02f      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d109      	bne.n	800233c <HAL_TIM_PWM_Start+0x58>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e022      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d109      	bne.n	8002356 <HAL_TIM_PWM_Start+0x72>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	e015      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d109      	bne.n	8002370 <HAL_TIM_PWM_Start+0x8c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	bf14      	ite	ne
 8002368:	2301      	movne	r3, #1
 800236a:	2300      	moveq	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e008      	b.n	8002382 <HAL_TIM_PWM_Start+0x9e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e097      	b.n	80024ba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <HAL_TIM_PWM_Start+0xb6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002398:	e023      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Start+0xc6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a8:	e01b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_PWM_Start+0xd6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d104      	bne.n	80023ca <HAL_TIM_PWM_Start+0xe6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0xf6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	e003      	b.n	80023e2 <HAL_TIM_PWM_Start+0xfe>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 f82e 	bl	800344c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_TIM_PWM_Start+0x1e0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <HAL_TIM_PWM_Start+0x1e4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00e      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_TIM_PWM_Start+0x1e8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_TIM_PWM_Start+0x1ec>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_TIM_PWM_Start+0x13e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_TIM_PWM_Start+0x1f0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_TIM_PWM_Start+0x142>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_TIM_PWM_Start+0x144>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <HAL_TIM_PWM_Start+0x1e0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d018      	beq.n	8002478 <HAL_TIM_PWM_Start+0x194>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d013      	beq.n	8002478 <HAL_TIM_PWM_Start+0x194>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_TIM_PWM_Start+0x1f4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_TIM_PWM_Start+0x194>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_TIM_PWM_Start+0x1f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_TIM_PWM_Start+0x194>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_TIM_PWM_Start+0x1e4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_TIM_PWM_Start+0x194>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_TIM_PWM_Start+0x1e8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d115      	bne.n	80024a4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_TIM_PWM_Start+0x1fc>)
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d015      	beq.n	80024b6 <HAL_TIM_PWM_Start+0x1d2>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d011      	beq.n	80024b6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	e008      	b.n	80024b6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e000      	b.n	80024b8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40013400 	.word	0x40013400
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40014400 	.word	0x40014400
 80024d4:	40014800 	.word	0x40014800
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	00010007 	.word	0x00010007

080024e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d020      	beq.n	8002548 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0202 	mvn.w	r2, #2
 8002518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fb40 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fb32 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb43 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d020      	beq.n	8002594 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0204 	mvn.w	r2, #4
 8002564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fb1a 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fb0c 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb1d 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d020      	beq.n	80025e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0208 	mvn.w	r2, #8
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2204      	movs	r2, #4
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 faf4 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fae6 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 faf7 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d020      	beq.n	800262c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01b      	beq.n	800262c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0210 	mvn.w	r2, #16
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2208      	movs	r2, #8
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 face 	bl	8002bb4 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fac0 	bl	8002ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fad1 	bl	8002bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0201 	mvn.w	r2, #1
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fd fe62 	bl	8000314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d104      	bne.n	8002664 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f001 f825 	bl	80036c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800269a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f81d 	bl	80036dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa8b 	bl	8002bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f06f 0220 	mvn.w	r2, #32
 80026e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 ffe5 	bl	80036b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fff1 	bl	80036f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800272a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 ffe9 	bl	8003704 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00c      	beq.n	8002756 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800274e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 ffe1 	bl	8003718 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00c      	beq.n	800277a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 ffd9 	bl	800372c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0ff      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b14      	cmp	r3, #20
 80027ae:	f200 80f0 	bhi.w	8002992 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	0800280d 	.word	0x0800280d
 80027bc:	08002993 	.word	0x08002993
 80027c0:	08002993 	.word	0x08002993
 80027c4:	08002993 	.word	0x08002993
 80027c8:	0800284d 	.word	0x0800284d
 80027cc:	08002993 	.word	0x08002993
 80027d0:	08002993 	.word	0x08002993
 80027d4:	08002993 	.word	0x08002993
 80027d8:	0800288f 	.word	0x0800288f
 80027dc:	08002993 	.word	0x08002993
 80027e0:	08002993 	.word	0x08002993
 80027e4:	08002993 	.word	0x08002993
 80027e8:	080028cf 	.word	0x080028cf
 80027ec:	08002993 	.word	0x08002993
 80027f0:	08002993 	.word	0x08002993
 80027f4:	08002993 	.word	0x08002993
 80027f8:	08002911 	.word	0x08002911
 80027fc:	08002993 	.word	0x08002993
 8002800:	08002993 	.word	0x08002993
 8002804:	08002993 	.word	0x08002993
 8002808:	08002951 	.word	0x08002951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fa88 	bl	8002d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6999      	ldr	r1, [r3, #24]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	619a      	str	r2, [r3, #24]
      break;
 800284a:	e0a5      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 faf8 	bl	8002e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	619a      	str	r2, [r3, #24]
      break;
 800288c:	e084      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fb61 	bl	8002f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0208 	orr.w	r2, r2, #8
 80028a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0204 	bic.w	r2, r2, #4
 80028b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	61da      	str	r2, [r3, #28]
      break;
 80028cc:	e064      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fbc9 	bl	800306c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	021a      	lsls	r2, r3, #8
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	61da      	str	r2, [r3, #28]
      break;
 800290e:	e043      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fc32 	bl	8003180 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0208 	orr.w	r2, r2, #8
 800292a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0204 	bic.w	r2, r2, #4
 800293a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800294e:	e023      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fc76 	bl	8003248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	021a      	lsls	r2, r3, #8
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002990:	e002      	b.n	8002998 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
      break;
 8002996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop

080029ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_TIM_ConfigClockSource+0x1c>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e0de      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x1da>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80029e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	f000 80a9 	beq.w	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a08:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	f200 80ae 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a10:	4a60      	ldr	r2, [pc, #384]	; (8002b94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	f000 80a1 	beq.w	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a18:	4a5e      	ldr	r2, [pc, #376]	; (8002b94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f200 80a6 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f000 8099 	beq.w	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a28:	4a5b      	ldr	r2, [pc, #364]	; (8002b98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f200 809e 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a30:	4a5a      	ldr	r2, [pc, #360]	; (8002b9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f000 8091 	beq.w	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f200 8096 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002a44:	f000 8089 	beq.w	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002a4c:	f200 808e 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a54:	d03e      	beq.n	8002ad4 <HAL_TIM_ConfigClockSource+0x128>
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	f200 8087 	bhi.w	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	f000 8086 	beq.w	8002b72 <HAL_TIM_ConfigClockSource+0x1c6>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d87f      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d01a      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a70:	2b70      	cmp	r3, #112	; 0x70
 8002a72:	d87b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d050      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x16e>
 8002a78:	2b60      	cmp	r3, #96	; 0x60
 8002a7a:	d877      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d03c      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x14e>
 8002a80:	2b50      	cmp	r3, #80	; 0x50
 8002a82:	d873      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d058      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x18e>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d86f      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d064      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a90:	2b30      	cmp	r3, #48	; 0x30
 8002a92:	d86b      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d060      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d867      	bhi.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05c      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d05a      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x1ae>
 8002aa4:	e062      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab6:	f000 fca9 	bl	800340c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	609a      	str	r2, [r3, #8]
      break;
 8002ad2:	e04f      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	f000 fc92 	bl	800340c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af6:	609a      	str	r2, [r3, #8]
      break;
 8002af8:	e03c      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b06:	461a      	mov	r2, r3
 8002b08:	f000 fc04 	bl	8003314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2150      	movs	r1, #80	; 0x50
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fc5d 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002b18:	e02c      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b26:	461a      	mov	r2, r3
 8002b28:	f000 fc23 	bl	8003372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2160      	movs	r1, #96	; 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fc4d 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002b38:	e01c      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b46:	461a      	mov	r2, r3
 8002b48:	f000 fbe4 	bl	8003314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2140      	movs	r1, #64	; 0x40
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fc3d 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002b58:	e00c      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f000 fc34 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002b6a:	e003      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b70:	e000      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00100070 	.word	0x00100070
 8002b94:	00100040 	.word	0x00100040
 8002b98:	00100030 	.word	0x00100030
 8002b9c:	00100020 	.word	0x00100020

08002ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a42      	ldr	r2, [pc, #264]	; (8002d0c <TIM_Base_SetConfig+0x11c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00f      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d00b      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3f      	ldr	r2, [pc, #252]	; (8002d10 <TIM_Base_SetConfig+0x120>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <TIM_Base_SetConfig+0x124>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_Base_SetConfig+0x38>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <TIM_Base_SetConfig+0x128>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d108      	bne.n	8002c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <TIM_Base_SetConfig+0x11c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <TIM_Base_SetConfig+0x120>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <TIM_Base_SetConfig+0x124>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <TIM_Base_SetConfig+0x128>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2d      	ldr	r2, [pc, #180]	; (8002d1c <TIM_Base_SetConfig+0x12c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <TIM_Base_SetConfig+0x130>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x8a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <TIM_Base_SetConfig+0x134>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <TIM_Base_SetConfig+0x11c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0xe8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <TIM_Base_SetConfig+0x128>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0xe8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <TIM_Base_SetConfig+0x12c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0xe8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <TIM_Base_SetConfig+0x130>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0xe8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <TIM_Base_SetConfig+0x134>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d103      	bne.n	8002ce0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	611a      	str	r2, [r3, #16]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40013400 	.word	0x40013400
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40014400 	.word	0x40014400
 8002d24:	40014800 	.word	0x40014800

08002d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 0201 	bic.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f023 0302 	bic.w	r3, r3, #2
 8002d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <TIM_OC1_SetConfig+0x10c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00f      	beq.n	8002da8 <TIM_OC1_SetConfig+0x80>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <TIM_OC1_SetConfig+0x110>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <TIM_OC1_SetConfig+0x80>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <TIM_OC1_SetConfig+0x114>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_OC1_SetConfig+0x80>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <TIM_OC1_SetConfig+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_OC1_SetConfig+0x80>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <TIM_OC1_SetConfig+0x11c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10c      	bne.n	8002dc2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0308 	bic.w	r3, r3, #8
 8002dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <TIM_OC1_SetConfig+0x10c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00f      	beq.n	8002dea <TIM_OC1_SetConfig+0xc2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <TIM_OC1_SetConfig+0x110>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <TIM_OC1_SetConfig+0xc2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <TIM_OC1_SetConfig+0x114>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_OC1_SetConfig+0xc2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <TIM_OC1_SetConfig+0x118>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_OC1_SetConfig+0xc2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <TIM_OC1_SetConfig+0x11c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d111      	bne.n	8002e0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40013400 	.word	0x40013400
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800

08002e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f023 0210 	bic.w	r2, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <TIM_OC2_SetConfig+0x100>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_OC2_SetConfig+0x6c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <TIM_OC2_SetConfig+0x104>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10d      	bne.n	8002ed0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <TIM_OC2_SetConfig+0x100>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xb0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <TIM_OC2_SetConfig+0x104>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <TIM_OC2_SetConfig+0x108>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xb0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <TIM_OC2_SetConfig+0x10c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_OC2_SetConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <TIM_OC2_SetConfig+0x110>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d113      	bne.n	8002f20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40013400 	.word	0x40013400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <TIM_OC3_SetConfig+0xfc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_OC3_SetConfig+0x6a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	; (800305c <TIM_OC3_SetConfig+0x100>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10d      	bne.n	8002fe2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <TIM_OC3_SetConfig+0xfc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00f      	beq.n	800300a <TIM_OC3_SetConfig+0xae>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <TIM_OC3_SetConfig+0x100>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00b      	beq.n	800300a <TIM_OC3_SetConfig+0xae>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <TIM_OC3_SetConfig+0x104>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <TIM_OC3_SetConfig+0xae>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <TIM_OC3_SetConfig+0x108>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_OC3_SetConfig+0xae>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <TIM_OC3_SetConfig+0x10c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d113      	bne.n	8003032 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40013400 	.word	0x40013400
 8003060:	40014000 	.word	0x40014000
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800

0800306c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	031b      	lsls	r3, r3, #12
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a28      	ldr	r2, [pc, #160]	; (800316c <TIM_OC4_SetConfig+0x100>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_OC4_SetConfig+0x6c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a27      	ldr	r2, [pc, #156]	; (8003170 <TIM_OC4_SetConfig+0x104>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10d      	bne.n	80030f4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	031b      	lsls	r3, r3, #12
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <TIM_OC4_SetConfig+0x100>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00f      	beq.n	800311c <TIM_OC4_SetConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <TIM_OC4_SetConfig+0x104>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_OC4_SetConfig+0xb0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <TIM_OC4_SetConfig+0x108>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_OC4_SetConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <TIM_OC4_SetConfig+0x10c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_OC4_SetConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a19      	ldr	r2, [pc, #100]	; (800317c <TIM_OC4_SetConfig+0x110>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d113      	bne.n	8003144 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003122:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800312a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40013400 	.word	0x40013400
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <TIM_OC5_SetConfig+0xb4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_OC5_SetConfig+0x7a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a16      	ldr	r2, [pc, #88]	; (8003238 <TIM_OC5_SetConfig+0xb8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_OC5_SetConfig+0x7a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <TIM_OC5_SetConfig+0xbc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_OC5_SetConfig+0x7a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <TIM_OC5_SetConfig+0xc0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_OC5_SetConfig+0x7a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <TIM_OC5_SetConfig+0xc4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d109      	bne.n	800320e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	621a      	str	r2, [r3, #32]
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800

08003248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800328e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TIM_OC6_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00f      	beq.n	80032c4 <TIM_OC6_SetConfig+0x7c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a17      	ldr	r2, [pc, #92]	; (8003304 <TIM_OC6_SetConfig+0xbc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_OC6_SetConfig+0x7c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <TIM_OC6_SetConfig+0xc0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_OC6_SetConfig+0x7c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <TIM_OC6_SetConfig+0xc4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC6_SetConfig+0x7c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a14      	ldr	r2, [pc, #80]	; (8003310 <TIM_OC6_SetConfig+0xc8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d109      	bne.n	80032d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40013400 	.word	0x40013400
 8003308:	40014000 	.word	0x40014000
 800330c:	40014400 	.word	0x40014400
 8003310:	40014800 	.word	0x40014800

08003314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f023 0201 	bic.w	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 030a 	bic.w	r3, r3, #10
 8003350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f023 0210 	bic.w	r2, r3, #16
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800339c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	031b      	lsls	r3, r3, #12
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f043 0307 	orr.w	r3, r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	431a      	orrs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2201      	movs	r2, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a1a      	ldr	r2, [r3, #32]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e065      	b.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80034fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003500:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d013      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a12      	ldr	r2, [pc, #72]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10c      	bne.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800
 8003598:	40014000 	.word	0x40014000

0800359c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e073      	b.n	80036a0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a19      	ldr	r2, [pc, #100]	; (80036ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d11c      	bne.n	800368e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	051b      	lsls	r3, r3, #20
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400

080036b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <std>:
 8003740:	2300      	movs	r3, #0
 8003742:	b510      	push	{r4, lr}
 8003744:	4604      	mov	r4, r0
 8003746:	e9c0 3300 	strd	r3, r3, [r0]
 800374a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800374e:	6083      	str	r3, [r0, #8]
 8003750:	8181      	strh	r1, [r0, #12]
 8003752:	6643      	str	r3, [r0, #100]	; 0x64
 8003754:	81c2      	strh	r2, [r0, #14]
 8003756:	6183      	str	r3, [r0, #24]
 8003758:	4619      	mov	r1, r3
 800375a:	2208      	movs	r2, #8
 800375c:	305c      	adds	r0, #92	; 0x5c
 800375e:	f000 f9f7 	bl	8003b50 <memset>
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <std+0x58>)
 8003764:	6263      	str	r3, [r4, #36]	; 0x24
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <std+0x5c>)
 8003768:	62a3      	str	r3, [r4, #40]	; 0x28
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <std+0x60>)
 800376c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <std+0x64>)
 8003770:	6323      	str	r3, [r4, #48]	; 0x30
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <std+0x68>)
 8003774:	6224      	str	r4, [r4, #32]
 8003776:	429c      	cmp	r4, r3
 8003778:	d006      	beq.n	8003788 <std+0x48>
 800377a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800377e:	4294      	cmp	r4, r2
 8003780:	d002      	beq.n	8003788 <std+0x48>
 8003782:	33d0      	adds	r3, #208	; 0xd0
 8003784:	429c      	cmp	r4, r3
 8003786:	d105      	bne.n	8003794 <std+0x54>
 8003788:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003790:	f000 ba56 	b.w	8003c40 <__retarget_lock_init_recursive>
 8003794:	bd10      	pop	{r4, pc}
 8003796:	bf00      	nop
 8003798:	080039a1 	.word	0x080039a1
 800379c:	080039c3 	.word	0x080039c3
 80037a0:	080039fb 	.word	0x080039fb
 80037a4:	08003a1f 	.word	0x08003a1f
 80037a8:	200001a4 	.word	0x200001a4

080037ac <stdio_exit_handler>:
 80037ac:	4a02      	ldr	r2, [pc, #8]	; (80037b8 <stdio_exit_handler+0xc>)
 80037ae:	4903      	ldr	r1, [pc, #12]	; (80037bc <stdio_exit_handler+0x10>)
 80037b0:	4803      	ldr	r0, [pc, #12]	; (80037c0 <stdio_exit_handler+0x14>)
 80037b2:	f000 b869 	b.w	8003888 <_fwalk_sglue>
 80037b6:	bf00      	nop
 80037b8:	20000014 	.word	0x20000014
 80037bc:	080044ed 	.word	0x080044ed
 80037c0:	20000020 	.word	0x20000020

080037c4 <cleanup_stdio>:
 80037c4:	6841      	ldr	r1, [r0, #4]
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <cleanup_stdio+0x34>)
 80037c8:	4299      	cmp	r1, r3
 80037ca:	b510      	push	{r4, lr}
 80037cc:	4604      	mov	r4, r0
 80037ce:	d001      	beq.n	80037d4 <cleanup_stdio+0x10>
 80037d0:	f000 fe8c 	bl	80044ec <_fflush_r>
 80037d4:	68a1      	ldr	r1, [r4, #8]
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <cleanup_stdio+0x38>)
 80037d8:	4299      	cmp	r1, r3
 80037da:	d002      	beq.n	80037e2 <cleanup_stdio+0x1e>
 80037dc:	4620      	mov	r0, r4
 80037de:	f000 fe85 	bl	80044ec <_fflush_r>
 80037e2:	68e1      	ldr	r1, [r4, #12]
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <cleanup_stdio+0x3c>)
 80037e6:	4299      	cmp	r1, r3
 80037e8:	d004      	beq.n	80037f4 <cleanup_stdio+0x30>
 80037ea:	4620      	mov	r0, r4
 80037ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f0:	f000 be7c 	b.w	80044ec <_fflush_r>
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	200001a4 	.word	0x200001a4
 80037fc:	2000020c 	.word	0x2000020c
 8003800:	20000274 	.word	0x20000274

08003804 <global_stdio_init.part.0>:
 8003804:	b510      	push	{r4, lr}
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <global_stdio_init.part.0+0x30>)
 8003808:	4c0b      	ldr	r4, [pc, #44]	; (8003838 <global_stdio_init.part.0+0x34>)
 800380a:	4a0c      	ldr	r2, [pc, #48]	; (800383c <global_stdio_init.part.0+0x38>)
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	4620      	mov	r0, r4
 8003810:	2200      	movs	r2, #0
 8003812:	2104      	movs	r1, #4
 8003814:	f7ff ff94 	bl	8003740 <std>
 8003818:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800381c:	2201      	movs	r2, #1
 800381e:	2109      	movs	r1, #9
 8003820:	f7ff ff8e 	bl	8003740 <std>
 8003824:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003828:	2202      	movs	r2, #2
 800382a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382e:	2112      	movs	r1, #18
 8003830:	f7ff bf86 	b.w	8003740 <std>
 8003834:	200002dc 	.word	0x200002dc
 8003838:	200001a4 	.word	0x200001a4
 800383c:	080037ad 	.word	0x080037ad

08003840 <__sfp_lock_acquire>:
 8003840:	4801      	ldr	r0, [pc, #4]	; (8003848 <__sfp_lock_acquire+0x8>)
 8003842:	f000 b9fe 	b.w	8003c42 <__retarget_lock_acquire_recursive>
 8003846:	bf00      	nop
 8003848:	200002e5 	.word	0x200002e5

0800384c <__sfp_lock_release>:
 800384c:	4801      	ldr	r0, [pc, #4]	; (8003854 <__sfp_lock_release+0x8>)
 800384e:	f000 b9f9 	b.w	8003c44 <__retarget_lock_release_recursive>
 8003852:	bf00      	nop
 8003854:	200002e5 	.word	0x200002e5

08003858 <__sinit>:
 8003858:	b510      	push	{r4, lr}
 800385a:	4604      	mov	r4, r0
 800385c:	f7ff fff0 	bl	8003840 <__sfp_lock_acquire>
 8003860:	6a23      	ldr	r3, [r4, #32]
 8003862:	b11b      	cbz	r3, 800386c <__sinit+0x14>
 8003864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003868:	f7ff bff0 	b.w	800384c <__sfp_lock_release>
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__sinit+0x28>)
 800386e:	6223      	str	r3, [r4, #32]
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__sinit+0x2c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f5      	bne.n	8003864 <__sinit+0xc>
 8003878:	f7ff ffc4 	bl	8003804 <global_stdio_init.part.0>
 800387c:	e7f2      	b.n	8003864 <__sinit+0xc>
 800387e:	bf00      	nop
 8003880:	080037c5 	.word	0x080037c5
 8003884:	200002dc 	.word	0x200002dc

08003888 <_fwalk_sglue>:
 8003888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800388c:	4607      	mov	r7, r0
 800388e:	4688      	mov	r8, r1
 8003890:	4614      	mov	r4, r2
 8003892:	2600      	movs	r6, #0
 8003894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003898:	f1b9 0901 	subs.w	r9, r9, #1
 800389c:	d505      	bpl.n	80038aa <_fwalk_sglue+0x22>
 800389e:	6824      	ldr	r4, [r4, #0]
 80038a0:	2c00      	cmp	r4, #0
 80038a2:	d1f7      	bne.n	8003894 <_fwalk_sglue+0xc>
 80038a4:	4630      	mov	r0, r6
 80038a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d907      	bls.n	80038c0 <_fwalk_sglue+0x38>
 80038b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b4:	3301      	adds	r3, #1
 80038b6:	d003      	beq.n	80038c0 <_fwalk_sglue+0x38>
 80038b8:	4629      	mov	r1, r5
 80038ba:	4638      	mov	r0, r7
 80038bc:	47c0      	blx	r8
 80038be:	4306      	orrs	r6, r0
 80038c0:	3568      	adds	r5, #104	; 0x68
 80038c2:	e7e9      	b.n	8003898 <_fwalk_sglue+0x10>

080038c4 <iprintf>:
 80038c4:	b40f      	push	{r0, r1, r2, r3}
 80038c6:	b507      	push	{r0, r1, r2, lr}
 80038c8:	4906      	ldr	r1, [pc, #24]	; (80038e4 <iprintf+0x20>)
 80038ca:	ab04      	add	r3, sp, #16
 80038cc:	6808      	ldr	r0, [r1, #0]
 80038ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d2:	6881      	ldr	r1, [r0, #8]
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	f000 fad9 	bl	8003e8c <_vfiprintf_r>
 80038da:	b003      	add	sp, #12
 80038dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e0:	b004      	add	sp, #16
 80038e2:	4770      	bx	lr
 80038e4:	2000006c 	.word	0x2000006c

080038e8 <_puts_r>:
 80038e8:	6a03      	ldr	r3, [r0, #32]
 80038ea:	b570      	push	{r4, r5, r6, lr}
 80038ec:	6884      	ldr	r4, [r0, #8]
 80038ee:	4605      	mov	r5, r0
 80038f0:	460e      	mov	r6, r1
 80038f2:	b90b      	cbnz	r3, 80038f8 <_puts_r+0x10>
 80038f4:	f7ff ffb0 	bl	8003858 <__sinit>
 80038f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038fa:	07db      	lsls	r3, r3, #31
 80038fc:	d405      	bmi.n	800390a <_puts_r+0x22>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	0598      	lsls	r0, r3, #22
 8003902:	d402      	bmi.n	800390a <_puts_r+0x22>
 8003904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003906:	f000 f99c 	bl	8003c42 <__retarget_lock_acquire_recursive>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	0719      	lsls	r1, r3, #28
 800390e:	d513      	bpl.n	8003938 <_puts_r+0x50>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	b18b      	cbz	r3, 8003938 <_puts_r+0x50>
 8003914:	3e01      	subs	r6, #1
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800391c:	3b01      	subs	r3, #1
 800391e:	60a3      	str	r3, [r4, #8]
 8003920:	b9e9      	cbnz	r1, 800395e <_puts_r+0x76>
 8003922:	2b00      	cmp	r3, #0
 8003924:	da2e      	bge.n	8003984 <_puts_r+0x9c>
 8003926:	4622      	mov	r2, r4
 8003928:	210a      	movs	r1, #10
 800392a:	4628      	mov	r0, r5
 800392c:	f000 f87b 	bl	8003a26 <__swbuf_r>
 8003930:	3001      	adds	r0, #1
 8003932:	d007      	beq.n	8003944 <_puts_r+0x5c>
 8003934:	250a      	movs	r5, #10
 8003936:	e007      	b.n	8003948 <_puts_r+0x60>
 8003938:	4621      	mov	r1, r4
 800393a:	4628      	mov	r0, r5
 800393c:	f000 f8b0 	bl	8003aa0 <__swsetup_r>
 8003940:	2800      	cmp	r0, #0
 8003942:	d0e7      	beq.n	8003914 <_puts_r+0x2c>
 8003944:	f04f 35ff 	mov.w	r5, #4294967295
 8003948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800394a:	07da      	lsls	r2, r3, #31
 800394c:	d405      	bmi.n	800395a <_puts_r+0x72>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	059b      	lsls	r3, r3, #22
 8003952:	d402      	bmi.n	800395a <_puts_r+0x72>
 8003954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003956:	f000 f975 	bl	8003c44 <__retarget_lock_release_recursive>
 800395a:	4628      	mov	r0, r5
 800395c:	bd70      	pop	{r4, r5, r6, pc}
 800395e:	2b00      	cmp	r3, #0
 8003960:	da04      	bge.n	800396c <_puts_r+0x84>
 8003962:	69a2      	ldr	r2, [r4, #24]
 8003964:	429a      	cmp	r2, r3
 8003966:	dc06      	bgt.n	8003976 <_puts_r+0x8e>
 8003968:	290a      	cmp	r1, #10
 800396a:	d004      	beq.n	8003976 <_puts_r+0x8e>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	6022      	str	r2, [r4, #0]
 8003972:	7019      	strb	r1, [r3, #0]
 8003974:	e7cf      	b.n	8003916 <_puts_r+0x2e>
 8003976:	4622      	mov	r2, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f000 f854 	bl	8003a26 <__swbuf_r>
 800397e:	3001      	adds	r0, #1
 8003980:	d1c9      	bne.n	8003916 <_puts_r+0x2e>
 8003982:	e7df      	b.n	8003944 <_puts_r+0x5c>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	250a      	movs	r5, #10
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	6022      	str	r2, [r4, #0]
 800398c:	701d      	strb	r5, [r3, #0]
 800398e:	e7db      	b.n	8003948 <_puts_r+0x60>

08003990 <puts>:
 8003990:	4b02      	ldr	r3, [pc, #8]	; (800399c <puts+0xc>)
 8003992:	4601      	mov	r1, r0
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f7ff bfa7 	b.w	80038e8 <_puts_r>
 800399a:	bf00      	nop
 800399c:	2000006c 	.word	0x2000006c

080039a0 <__sread>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	460c      	mov	r4, r1
 80039a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a8:	f000 f8fc 	bl	8003ba4 <_read_r>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	bfab      	itete	ge
 80039b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039b2:	89a3      	ldrhlt	r3, [r4, #12]
 80039b4:	181b      	addge	r3, r3, r0
 80039b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ba:	bfac      	ite	ge
 80039bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039be:	81a3      	strhlt	r3, [r4, #12]
 80039c0:	bd10      	pop	{r4, pc}

080039c2 <__swrite>:
 80039c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c6:	461f      	mov	r7, r3
 80039c8:	898b      	ldrh	r3, [r1, #12]
 80039ca:	05db      	lsls	r3, r3, #23
 80039cc:	4605      	mov	r5, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	4616      	mov	r6, r2
 80039d2:	d505      	bpl.n	80039e0 <__swrite+0x1e>
 80039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d8:	2302      	movs	r3, #2
 80039da:	2200      	movs	r2, #0
 80039dc:	f000 f8d0 	bl	8003b80 <_lseek_r>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	4632      	mov	r2, r6
 80039ee:	463b      	mov	r3, r7
 80039f0:	4628      	mov	r0, r5
 80039f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	f000 b8e7 	b.w	8003bc8 <_write_r>

080039fa <__sseek>:
 80039fa:	b510      	push	{r4, lr}
 80039fc:	460c      	mov	r4, r1
 80039fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a02:	f000 f8bd 	bl	8003b80 <_lseek_r>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	bf15      	itete	ne
 8003a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a16:	81a3      	strheq	r3, [r4, #12]
 8003a18:	bf18      	it	ne
 8003a1a:	81a3      	strhne	r3, [r4, #12]
 8003a1c:	bd10      	pop	{r4, pc}

08003a1e <__sclose>:
 8003a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a22:	f000 b89d 	b.w	8003b60 <_close_r>

08003a26 <__swbuf_r>:
 8003a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a28:	460e      	mov	r6, r1
 8003a2a:	4614      	mov	r4, r2
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	b118      	cbz	r0, 8003a38 <__swbuf_r+0x12>
 8003a30:	6a03      	ldr	r3, [r0, #32]
 8003a32:	b90b      	cbnz	r3, 8003a38 <__swbuf_r+0x12>
 8003a34:	f7ff ff10 	bl	8003858 <__sinit>
 8003a38:	69a3      	ldr	r3, [r4, #24]
 8003a3a:	60a3      	str	r3, [r4, #8]
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	071a      	lsls	r2, r3, #28
 8003a40:	d525      	bpl.n	8003a8e <__swbuf_r+0x68>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	b31b      	cbz	r3, 8003a8e <__swbuf_r+0x68>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	6922      	ldr	r2, [r4, #16]
 8003a4a:	1a98      	subs	r0, r3, r2
 8003a4c:	6963      	ldr	r3, [r4, #20]
 8003a4e:	b2f6      	uxtb	r6, r6
 8003a50:	4283      	cmp	r3, r0
 8003a52:	4637      	mov	r7, r6
 8003a54:	dc04      	bgt.n	8003a60 <__swbuf_r+0x3a>
 8003a56:	4621      	mov	r1, r4
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 fd47 	bl	80044ec <_fflush_r>
 8003a5e:	b9e0      	cbnz	r0, 8003a9a <__swbuf_r+0x74>
 8003a60:	68a3      	ldr	r3, [r4, #8]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	6022      	str	r2, [r4, #0]
 8003a6c:	701e      	strb	r6, [r3, #0]
 8003a6e:	6962      	ldr	r2, [r4, #20]
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d004      	beq.n	8003a80 <__swbuf_r+0x5a>
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	07db      	lsls	r3, r3, #31
 8003a7a:	d506      	bpl.n	8003a8a <__swbuf_r+0x64>
 8003a7c:	2e0a      	cmp	r6, #10
 8003a7e:	d104      	bne.n	8003a8a <__swbuf_r+0x64>
 8003a80:	4621      	mov	r1, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 fd32 	bl	80044ec <_fflush_r>
 8003a88:	b938      	cbnz	r0, 8003a9a <__swbuf_r+0x74>
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8e:	4621      	mov	r1, r4
 8003a90:	4628      	mov	r0, r5
 8003a92:	f000 f805 	bl	8003aa0 <__swsetup_r>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d0d5      	beq.n	8003a46 <__swbuf_r+0x20>
 8003a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8003a9e:	e7f4      	b.n	8003a8a <__swbuf_r+0x64>

08003aa0 <__swsetup_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <__swsetup_r+0xac>)
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	b118      	cbz	r0, 8003ab4 <__swsetup_r+0x14>
 8003aac:	6a03      	ldr	r3, [r0, #32]
 8003aae:	b90b      	cbnz	r3, 8003ab4 <__swsetup_r+0x14>
 8003ab0:	f7ff fed2 	bl	8003858 <__sinit>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003aba:	0718      	lsls	r0, r3, #28
 8003abc:	d422      	bmi.n	8003b04 <__swsetup_r+0x64>
 8003abe:	06d9      	lsls	r1, r3, #27
 8003ac0:	d407      	bmi.n	8003ad2 <__swsetup_r+0x32>
 8003ac2:	2309      	movs	r3, #9
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003aca:	81a3      	strh	r3, [r4, #12]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e034      	b.n	8003b3c <__swsetup_r+0x9c>
 8003ad2:	0758      	lsls	r0, r3, #29
 8003ad4:	d512      	bpl.n	8003afc <__swsetup_r+0x5c>
 8003ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ad8:	b141      	cbz	r1, 8003aec <__swsetup_r+0x4c>
 8003ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ade:	4299      	cmp	r1, r3
 8003ae0:	d002      	beq.n	8003ae8 <__swsetup_r+0x48>
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f8b0 	bl	8003c48 <_free_r>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6363      	str	r3, [r4, #52]	; 0x34
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003af2:	81a3      	strh	r3, [r4, #12]
 8003af4:	2300      	movs	r3, #0
 8003af6:	6063      	str	r3, [r4, #4]
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	81a3      	strh	r3, [r4, #12]
 8003b04:	6923      	ldr	r3, [r4, #16]
 8003b06:	b94b      	cbnz	r3, 8003b1c <__swsetup_r+0x7c>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b12:	d003      	beq.n	8003b1c <__swsetup_r+0x7c>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 fd36 	bl	8004588 <__smakebuf_r>
 8003b1c:	89a0      	ldrh	r0, [r4, #12]
 8003b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b22:	f010 0301 	ands.w	r3, r0, #1
 8003b26:	d00a      	beq.n	8003b3e <__swsetup_r+0x9e>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60a3      	str	r3, [r4, #8]
 8003b2c:	6963      	ldr	r3, [r4, #20]
 8003b2e:	425b      	negs	r3, r3
 8003b30:	61a3      	str	r3, [r4, #24]
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	b943      	cbnz	r3, 8003b48 <__swsetup_r+0xa8>
 8003b36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b3a:	d1c4      	bne.n	8003ac6 <__swsetup_r+0x26>
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	0781      	lsls	r1, r0, #30
 8003b40:	bf58      	it	pl
 8003b42:	6963      	ldrpl	r3, [r4, #20]
 8003b44:	60a3      	str	r3, [r4, #8]
 8003b46:	e7f4      	b.n	8003b32 <__swsetup_r+0x92>
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e7f7      	b.n	8003b3c <__swsetup_r+0x9c>
 8003b4c:	2000006c 	.word	0x2000006c

08003b50 <memset>:
 8003b50:	4402      	add	r2, r0
 8003b52:	4603      	mov	r3, r0
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <memset+0xa>
 8003b58:	4770      	bx	lr
 8003b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5e:	e7f9      	b.n	8003b54 <memset+0x4>

08003b60 <_close_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4d06      	ldr	r5, [pc, #24]	; (8003b7c <_close_r+0x1c>)
 8003b64:	2300      	movs	r3, #0
 8003b66:	4604      	mov	r4, r0
 8003b68:	4608      	mov	r0, r1
 8003b6a:	602b      	str	r3, [r5, #0]
 8003b6c:	f7fd f8f7 	bl	8000d5e <_close>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	d102      	bne.n	8003b7a <_close_r+0x1a>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	b103      	cbz	r3, 8003b7a <_close_r+0x1a>
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	200002e0 	.word	0x200002e0

08003b80 <_lseek_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4d07      	ldr	r5, [pc, #28]	; (8003ba0 <_lseek_r+0x20>)
 8003b84:	4604      	mov	r4, r0
 8003b86:	4608      	mov	r0, r1
 8003b88:	4611      	mov	r1, r2
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	602a      	str	r2, [r5, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f7fd f90c 	bl	8000dac <_lseek>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_lseek_r+0x1e>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_lseek_r+0x1e>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	200002e0 	.word	0x200002e0

08003ba4 <_read_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4d07      	ldr	r5, [pc, #28]	; (8003bc4 <_read_r+0x20>)
 8003ba8:	4604      	mov	r4, r0
 8003baa:	4608      	mov	r0, r1
 8003bac:	4611      	mov	r1, r2
 8003bae:	2200      	movs	r2, #0
 8003bb0:	602a      	str	r2, [r5, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f7fd f89a 	bl	8000cec <_read>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_read_r+0x1e>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_read_r+0x1e>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	200002e0 	.word	0x200002e0

08003bc8 <_write_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	; (8003be8 <_write_r+0x20>)
 8003bcc:	4604      	mov	r4, r0
 8003bce:	4608      	mov	r0, r1
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fd f8a5 	bl	8000d26 <_write>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_write_r+0x1e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_write_r+0x1e>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	200002e0 	.word	0x200002e0

08003bec <__errno>:
 8003bec:	4b01      	ldr	r3, [pc, #4]	; (8003bf4 <__errno+0x8>)
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	2000006c 	.word	0x2000006c

08003bf8 <__libc_init_array>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4d0d      	ldr	r5, [pc, #52]	; (8003c30 <__libc_init_array+0x38>)
 8003bfc:	4c0d      	ldr	r4, [pc, #52]	; (8003c34 <__libc_init_array+0x3c>)
 8003bfe:	1b64      	subs	r4, r4, r5
 8003c00:	10a4      	asrs	r4, r4, #2
 8003c02:	2600      	movs	r6, #0
 8003c04:	42a6      	cmp	r6, r4
 8003c06:	d109      	bne.n	8003c1c <__libc_init_array+0x24>
 8003c08:	4d0b      	ldr	r5, [pc, #44]	; (8003c38 <__libc_init_array+0x40>)
 8003c0a:	4c0c      	ldr	r4, [pc, #48]	; (8003c3c <__libc_init_array+0x44>)
 8003c0c:	f000 fd2a 	bl	8004664 <_init>
 8003c10:	1b64      	subs	r4, r4, r5
 8003c12:	10a4      	asrs	r4, r4, #2
 8003c14:	2600      	movs	r6, #0
 8003c16:	42a6      	cmp	r6, r4
 8003c18:	d105      	bne.n	8003c26 <__libc_init_array+0x2e>
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c20:	4798      	blx	r3
 8003c22:	3601      	adds	r6, #1
 8003c24:	e7ee      	b.n	8003c04 <__libc_init_array+0xc>
 8003c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2a:	4798      	blx	r3
 8003c2c:	3601      	adds	r6, #1
 8003c2e:	e7f2      	b.n	8003c16 <__libc_init_array+0x1e>
 8003c30:	080046dc 	.word	0x080046dc
 8003c34:	080046dc 	.word	0x080046dc
 8003c38:	080046dc 	.word	0x080046dc
 8003c3c:	080046e0 	.word	0x080046e0

08003c40 <__retarget_lock_init_recursive>:
 8003c40:	4770      	bx	lr

08003c42 <__retarget_lock_acquire_recursive>:
 8003c42:	4770      	bx	lr

08003c44 <__retarget_lock_release_recursive>:
 8003c44:	4770      	bx	lr
	...

08003c48 <_free_r>:
 8003c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d044      	beq.n	8003cd8 <_free_r+0x90>
 8003c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c52:	9001      	str	r0, [sp, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f1a1 0404 	sub.w	r4, r1, #4
 8003c5a:	bfb8      	it	lt
 8003c5c:	18e4      	addlt	r4, r4, r3
 8003c5e:	f000 f8df 	bl	8003e20 <__malloc_lock>
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <_free_r+0x94>)
 8003c64:	9801      	ldr	r0, [sp, #4]
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	b933      	cbnz	r3, 8003c78 <_free_r+0x30>
 8003c6a:	6063      	str	r3, [r4, #4]
 8003c6c:	6014      	str	r4, [r2, #0]
 8003c6e:	b003      	add	sp, #12
 8003c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c74:	f000 b8da 	b.w	8003e2c <__malloc_unlock>
 8003c78:	42a3      	cmp	r3, r4
 8003c7a:	d908      	bls.n	8003c8e <_free_r+0x46>
 8003c7c:	6825      	ldr	r5, [r4, #0]
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf01      	itttt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	1949      	addeq	r1, r1, r5
 8003c8a:	6021      	streq	r1, [r4, #0]
 8003c8c:	e7ed      	b.n	8003c6a <_free_r+0x22>
 8003c8e:	461a      	mov	r2, r3
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <_free_r+0x50>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d9fa      	bls.n	8003c8e <_free_r+0x46>
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	1855      	adds	r5, r2, r1
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d10b      	bne.n	8003cb8 <_free_r+0x70>
 8003ca0:	6824      	ldr	r4, [r4, #0]
 8003ca2:	4421      	add	r1, r4
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	d1e0      	bne.n	8003c6e <_free_r+0x26>
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	440c      	add	r4, r1
 8003cb4:	6014      	str	r4, [r2, #0]
 8003cb6:	e7da      	b.n	8003c6e <_free_r+0x26>
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x78>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6003      	str	r3, [r0, #0]
 8003cbe:	e7d6      	b.n	8003c6e <_free_r+0x26>
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf04      	itt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	bf04      	itt	eq
 8003cd0:	1949      	addeq	r1, r1, r5
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6054      	str	r4, [r2, #4]
 8003cd6:	e7ca      	b.n	8003c6e <_free_r+0x26>
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
 8003cdc:	200002e8 	.word	0x200002e8

08003ce0 <sbrk_aligned>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4e0e      	ldr	r6, [pc, #56]	; (8003d1c <sbrk_aligned+0x3c>)
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	6831      	ldr	r1, [r6, #0]
 8003ce8:	4605      	mov	r5, r0
 8003cea:	b911      	cbnz	r1, 8003cf2 <sbrk_aligned+0x12>
 8003cec:	f000 fcaa 	bl	8004644 <_sbrk_r>
 8003cf0:	6030      	str	r0, [r6, #0]
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 fca5 	bl	8004644 <_sbrk_r>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d00a      	beq.n	8003d14 <sbrk_aligned+0x34>
 8003cfe:	1cc4      	adds	r4, r0, #3
 8003d00:	f024 0403 	bic.w	r4, r4, #3
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d007      	beq.n	8003d18 <sbrk_aligned+0x38>
 8003d08:	1a21      	subs	r1, r4, r0
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 fc9a 	bl	8004644 <_sbrk_r>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d101      	bne.n	8003d18 <sbrk_aligned+0x38>
 8003d14:	f04f 34ff 	mov.w	r4, #4294967295
 8003d18:	4620      	mov	r0, r4
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	200002ec 	.word	0x200002ec

08003d20 <_malloc_r>:
 8003d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d24:	1ccd      	adds	r5, r1, #3
 8003d26:	f025 0503 	bic.w	r5, r5, #3
 8003d2a:	3508      	adds	r5, #8
 8003d2c:	2d0c      	cmp	r5, #12
 8003d2e:	bf38      	it	cc
 8003d30:	250c      	movcc	r5, #12
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	4607      	mov	r7, r0
 8003d36:	db01      	blt.n	8003d3c <_malloc_r+0x1c>
 8003d38:	42a9      	cmp	r1, r5
 8003d3a:	d905      	bls.n	8003d48 <_malloc_r+0x28>
 8003d3c:	230c      	movs	r3, #12
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	2600      	movs	r6, #0
 8003d42:	4630      	mov	r0, r6
 8003d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e1c <_malloc_r+0xfc>
 8003d4c:	f000 f868 	bl	8003e20 <__malloc_lock>
 8003d50:	f8d8 3000 	ldr.w	r3, [r8]
 8003d54:	461c      	mov	r4, r3
 8003d56:	bb5c      	cbnz	r4, 8003db0 <_malloc_r+0x90>
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	f7ff ffc0 	bl	8003ce0 <sbrk_aligned>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	4604      	mov	r4, r0
 8003d64:	d155      	bne.n	8003e12 <_malloc_r+0xf2>
 8003d66:	f8d8 4000 	ldr.w	r4, [r8]
 8003d6a:	4626      	mov	r6, r4
 8003d6c:	2e00      	cmp	r6, #0
 8003d6e:	d145      	bne.n	8003dfc <_malloc_r+0xdc>
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	d048      	beq.n	8003e06 <_malloc_r+0xe6>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	4631      	mov	r1, r6
 8003d78:	4638      	mov	r0, r7
 8003d7a:	eb04 0903 	add.w	r9, r4, r3
 8003d7e:	f000 fc61 	bl	8004644 <_sbrk_r>
 8003d82:	4581      	cmp	r9, r0
 8003d84:	d13f      	bne.n	8003e06 <_malloc_r+0xe6>
 8003d86:	6821      	ldr	r1, [r4, #0]
 8003d88:	1a6d      	subs	r5, r5, r1
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f7ff ffa7 	bl	8003ce0 <sbrk_aligned>
 8003d92:	3001      	adds	r0, #1
 8003d94:	d037      	beq.n	8003e06 <_malloc_r+0xe6>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	442b      	add	r3, r5
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d038      	beq.n	8003e16 <_malloc_r+0xf6>
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	42a2      	cmp	r2, r4
 8003da8:	d12b      	bne.n	8003e02 <_malloc_r+0xe2>
 8003daa:	2200      	movs	r2, #0
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	e00f      	b.n	8003dd0 <_malloc_r+0xb0>
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	1b52      	subs	r2, r2, r5
 8003db4:	d41f      	bmi.n	8003df6 <_malloc_r+0xd6>
 8003db6:	2a0b      	cmp	r2, #11
 8003db8:	d917      	bls.n	8003dea <_malloc_r+0xca>
 8003dba:	1961      	adds	r1, r4, r5
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	bf18      	it	ne
 8003dc2:	6059      	strne	r1, [r3, #4]
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	bf08      	it	eq
 8003dc8:	f8c8 1000 	streq.w	r1, [r8]
 8003dcc:	5162      	str	r2, [r4, r5]
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f104 060b 	add.w	r6, r4, #11
 8003dd6:	f000 f829 	bl	8003e2c <__malloc_unlock>
 8003dda:	f026 0607 	bic.w	r6, r6, #7
 8003dde:	1d23      	adds	r3, r4, #4
 8003de0:	1af2      	subs	r2, r6, r3
 8003de2:	d0ae      	beq.n	8003d42 <_malloc_r+0x22>
 8003de4:	1b9b      	subs	r3, r3, r6
 8003de6:	50a3      	str	r3, [r4, r2]
 8003de8:	e7ab      	b.n	8003d42 <_malloc_r+0x22>
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	6862      	ldr	r2, [r4, #4]
 8003dee:	d1dd      	bne.n	8003dac <_malloc_r+0x8c>
 8003df0:	f8c8 2000 	str.w	r2, [r8]
 8003df4:	e7ec      	b.n	8003dd0 <_malloc_r+0xb0>
 8003df6:	4623      	mov	r3, r4
 8003df8:	6864      	ldr	r4, [r4, #4]
 8003dfa:	e7ac      	b.n	8003d56 <_malloc_r+0x36>
 8003dfc:	4634      	mov	r4, r6
 8003dfe:	6876      	ldr	r6, [r6, #4]
 8003e00:	e7b4      	b.n	8003d6c <_malloc_r+0x4c>
 8003e02:	4613      	mov	r3, r2
 8003e04:	e7cc      	b.n	8003da0 <_malloc_r+0x80>
 8003e06:	230c      	movs	r3, #12
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f000 f80e 	bl	8003e2c <__malloc_unlock>
 8003e10:	e797      	b.n	8003d42 <_malloc_r+0x22>
 8003e12:	6025      	str	r5, [r4, #0]
 8003e14:	e7dc      	b.n	8003dd0 <_malloc_r+0xb0>
 8003e16:	605b      	str	r3, [r3, #4]
 8003e18:	deff      	udf	#255	; 0xff
 8003e1a:	bf00      	nop
 8003e1c:	200002e8 	.word	0x200002e8

08003e20 <__malloc_lock>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__malloc_lock+0x8>)
 8003e22:	f7ff bf0e 	b.w	8003c42 <__retarget_lock_acquire_recursive>
 8003e26:	bf00      	nop
 8003e28:	200002e4 	.word	0x200002e4

08003e2c <__malloc_unlock>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__malloc_unlock+0x8>)
 8003e2e:	f7ff bf09 	b.w	8003c44 <__retarget_lock_release_recursive>
 8003e32:	bf00      	nop
 8003e34:	200002e4 	.word	0x200002e4

08003e38 <__sfputc_r>:
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	b410      	push	{r4}
 8003e40:	6093      	str	r3, [r2, #8]
 8003e42:	da08      	bge.n	8003e56 <__sfputc_r+0x1e>
 8003e44:	6994      	ldr	r4, [r2, #24]
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	db01      	blt.n	8003e4e <__sfputc_r+0x16>
 8003e4a:	290a      	cmp	r1, #10
 8003e4c:	d103      	bne.n	8003e56 <__sfputc_r+0x1e>
 8003e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e52:	f7ff bde8 	b.w	8003a26 <__swbuf_r>
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	1c58      	adds	r0, r3, #1
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	7019      	strb	r1, [r3, #0]
 8003e5e:	4608      	mov	r0, r1
 8003e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <__sfputs_r>:
 8003e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e68:	4606      	mov	r6, r0
 8003e6a:	460f      	mov	r7, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	18d5      	adds	r5, r2, r3
 8003e70:	42ac      	cmp	r4, r5
 8003e72:	d101      	bne.n	8003e78 <__sfputs_r+0x12>
 8003e74:	2000      	movs	r0, #0
 8003e76:	e007      	b.n	8003e88 <__sfputs_r+0x22>
 8003e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f7ff ffda 	bl	8003e38 <__sfputc_r>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d1f3      	bne.n	8003e70 <__sfputs_r+0xa>
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e8c <_vfiprintf_r>:
 8003e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	460d      	mov	r5, r1
 8003e92:	b09d      	sub	sp, #116	; 0x74
 8003e94:	4614      	mov	r4, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	4606      	mov	r6, r0
 8003e9a:	b118      	cbz	r0, 8003ea4 <_vfiprintf_r+0x18>
 8003e9c:	6a03      	ldr	r3, [r0, #32]
 8003e9e:	b90b      	cbnz	r3, 8003ea4 <_vfiprintf_r+0x18>
 8003ea0:	f7ff fcda 	bl	8003858 <__sinit>
 8003ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ea6:	07d9      	lsls	r1, r3, #31
 8003ea8:	d405      	bmi.n	8003eb6 <_vfiprintf_r+0x2a>
 8003eaa:	89ab      	ldrh	r3, [r5, #12]
 8003eac:	059a      	lsls	r2, r3, #22
 8003eae:	d402      	bmi.n	8003eb6 <_vfiprintf_r+0x2a>
 8003eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eb2:	f7ff fec6 	bl	8003c42 <__retarget_lock_acquire_recursive>
 8003eb6:	89ab      	ldrh	r3, [r5, #12]
 8003eb8:	071b      	lsls	r3, r3, #28
 8003eba:	d501      	bpl.n	8003ec0 <_vfiprintf_r+0x34>
 8003ebc:	692b      	ldr	r3, [r5, #16]
 8003ebe:	b99b      	cbnz	r3, 8003ee8 <_vfiprintf_r+0x5c>
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f7ff fdec 	bl	8003aa0 <__swsetup_r>
 8003ec8:	b170      	cbz	r0, 8003ee8 <_vfiprintf_r+0x5c>
 8003eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ecc:	07dc      	lsls	r4, r3, #31
 8003ece:	d504      	bpl.n	8003eda <_vfiprintf_r+0x4e>
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	b01d      	add	sp, #116	; 0x74
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	0598      	lsls	r0, r3, #22
 8003ede:	d4f7      	bmi.n	8003ed0 <_vfiprintf_r+0x44>
 8003ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ee2:	f7ff feaf 	bl	8003c44 <__retarget_lock_release_recursive>
 8003ee6:	e7f3      	b.n	8003ed0 <_vfiprintf_r+0x44>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9309      	str	r3, [sp, #36]	; 0x24
 8003eec:	2320      	movs	r3, #32
 8003eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ef6:	2330      	movs	r3, #48	; 0x30
 8003ef8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80040ac <_vfiprintf_r+0x220>
 8003efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f00:	f04f 0901 	mov.w	r9, #1
 8003f04:	4623      	mov	r3, r4
 8003f06:	469a      	mov	sl, r3
 8003f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f0c:	b10a      	cbz	r2, 8003f12 <_vfiprintf_r+0x86>
 8003f0e:	2a25      	cmp	r2, #37	; 0x25
 8003f10:	d1f9      	bne.n	8003f06 <_vfiprintf_r+0x7a>
 8003f12:	ebba 0b04 	subs.w	fp, sl, r4
 8003f16:	d00b      	beq.n	8003f30 <_vfiprintf_r+0xa4>
 8003f18:	465b      	mov	r3, fp
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f7ff ffa1 	bl	8003e66 <__sfputs_r>
 8003f24:	3001      	adds	r0, #1
 8003f26:	f000 80a9 	beq.w	800407c <_vfiprintf_r+0x1f0>
 8003f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f2c:	445a      	add	r2, fp
 8003f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f30:	f89a 3000 	ldrb.w	r3, [sl]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80a1 	beq.w	800407c <_vfiprintf_r+0x1f0>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f44:	f10a 0a01 	add.w	sl, sl, #1
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	9307      	str	r3, [sp, #28]
 8003f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f50:	931a      	str	r3, [sp, #104]	; 0x68
 8003f52:	4654      	mov	r4, sl
 8003f54:	2205      	movs	r2, #5
 8003f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5a:	4854      	ldr	r0, [pc, #336]	; (80040ac <_vfiprintf_r+0x220>)
 8003f5c:	f7fc f960 	bl	8000220 <memchr>
 8003f60:	9a04      	ldr	r2, [sp, #16]
 8003f62:	b9d8      	cbnz	r0, 8003f9c <_vfiprintf_r+0x110>
 8003f64:	06d1      	lsls	r1, r2, #27
 8003f66:	bf44      	itt	mi
 8003f68:	2320      	movmi	r3, #32
 8003f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f6e:	0713      	lsls	r3, r2, #28
 8003f70:	bf44      	itt	mi
 8003f72:	232b      	movmi	r3, #43	; 0x2b
 8003f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f78:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7e:	d015      	beq.n	8003fac <_vfiprintf_r+0x120>
 8003f80:	9a07      	ldr	r2, [sp, #28]
 8003f82:	4654      	mov	r4, sl
 8003f84:	2000      	movs	r0, #0
 8003f86:	f04f 0c0a 	mov.w	ip, #10
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f90:	3b30      	subs	r3, #48	; 0x30
 8003f92:	2b09      	cmp	r3, #9
 8003f94:	d94d      	bls.n	8004032 <_vfiprintf_r+0x1a6>
 8003f96:	b1b0      	cbz	r0, 8003fc6 <_vfiprintf_r+0x13a>
 8003f98:	9207      	str	r2, [sp, #28]
 8003f9a:	e014      	b.n	8003fc6 <_vfiprintf_r+0x13a>
 8003f9c:	eba0 0308 	sub.w	r3, r0, r8
 8003fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	46a2      	mov	sl, r4
 8003faa:	e7d2      	b.n	8003f52 <_vfiprintf_r+0xc6>
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	1d19      	adds	r1, r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	9103      	str	r1, [sp, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bfbb      	ittet	lt
 8003fb8:	425b      	neglt	r3, r3
 8003fba:	f042 0202 	orrlt.w	r2, r2, #2
 8003fbe:	9307      	strge	r3, [sp, #28]
 8003fc0:	9307      	strlt	r3, [sp, #28]
 8003fc2:	bfb8      	it	lt
 8003fc4:	9204      	strlt	r2, [sp, #16]
 8003fc6:	7823      	ldrb	r3, [r4, #0]
 8003fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8003fca:	d10c      	bne.n	8003fe6 <_vfiprintf_r+0x15a>
 8003fcc:	7863      	ldrb	r3, [r4, #1]
 8003fce:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd0:	d134      	bne.n	800403c <_vfiprintf_r+0x1b0>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	1d1a      	adds	r2, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9203      	str	r2, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfb8      	it	lt
 8003fde:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fe2:	3402      	adds	r4, #2
 8003fe4:	9305      	str	r3, [sp, #20]
 8003fe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80040bc <_vfiprintf_r+0x230>
 8003fea:	7821      	ldrb	r1, [r4, #0]
 8003fec:	2203      	movs	r2, #3
 8003fee:	4650      	mov	r0, sl
 8003ff0:	f7fc f916 	bl	8000220 <memchr>
 8003ff4:	b138      	cbz	r0, 8004006 <_vfiprintf_r+0x17a>
 8003ff6:	9b04      	ldr	r3, [sp, #16]
 8003ff8:	eba0 000a 	sub.w	r0, r0, sl
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	4082      	lsls	r2, r0
 8004000:	4313      	orrs	r3, r2
 8004002:	3401      	adds	r4, #1
 8004004:	9304      	str	r3, [sp, #16]
 8004006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400a:	4829      	ldr	r0, [pc, #164]	; (80040b0 <_vfiprintf_r+0x224>)
 800400c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004010:	2206      	movs	r2, #6
 8004012:	f7fc f905 	bl	8000220 <memchr>
 8004016:	2800      	cmp	r0, #0
 8004018:	d03f      	beq.n	800409a <_vfiprintf_r+0x20e>
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <_vfiprintf_r+0x228>)
 800401c:	bb1b      	cbnz	r3, 8004066 <_vfiprintf_r+0x1da>
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	3307      	adds	r3, #7
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	3308      	adds	r3, #8
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800402c:	443b      	add	r3, r7
 800402e:	9309      	str	r3, [sp, #36]	; 0x24
 8004030:	e768      	b.n	8003f04 <_vfiprintf_r+0x78>
 8004032:	fb0c 3202 	mla	r2, ip, r2, r3
 8004036:	460c      	mov	r4, r1
 8004038:	2001      	movs	r0, #1
 800403a:	e7a6      	b.n	8003f8a <_vfiprintf_r+0xfe>
 800403c:	2300      	movs	r3, #0
 800403e:	3401      	adds	r4, #1
 8004040:	9305      	str	r3, [sp, #20]
 8004042:	4619      	mov	r1, r3
 8004044:	f04f 0c0a 	mov.w	ip, #10
 8004048:	4620      	mov	r0, r4
 800404a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800404e:	3a30      	subs	r2, #48	; 0x30
 8004050:	2a09      	cmp	r2, #9
 8004052:	d903      	bls.n	800405c <_vfiprintf_r+0x1d0>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0c6      	beq.n	8003fe6 <_vfiprintf_r+0x15a>
 8004058:	9105      	str	r1, [sp, #20]
 800405a:	e7c4      	b.n	8003fe6 <_vfiprintf_r+0x15a>
 800405c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004060:	4604      	mov	r4, r0
 8004062:	2301      	movs	r3, #1
 8004064:	e7f0      	b.n	8004048 <_vfiprintf_r+0x1bc>
 8004066:	ab03      	add	r3, sp, #12
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	462a      	mov	r2, r5
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <_vfiprintf_r+0x22c>)
 800406e:	a904      	add	r1, sp, #16
 8004070:	4630      	mov	r0, r6
 8004072:	f3af 8000 	nop.w
 8004076:	4607      	mov	r7, r0
 8004078:	1c78      	adds	r0, r7, #1
 800407a:	d1d6      	bne.n	800402a <_vfiprintf_r+0x19e>
 800407c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800407e:	07d9      	lsls	r1, r3, #31
 8004080:	d405      	bmi.n	800408e <_vfiprintf_r+0x202>
 8004082:	89ab      	ldrh	r3, [r5, #12]
 8004084:	059a      	lsls	r2, r3, #22
 8004086:	d402      	bmi.n	800408e <_vfiprintf_r+0x202>
 8004088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800408a:	f7ff fddb 	bl	8003c44 <__retarget_lock_release_recursive>
 800408e:	89ab      	ldrh	r3, [r5, #12]
 8004090:	065b      	lsls	r3, r3, #25
 8004092:	f53f af1d 	bmi.w	8003ed0 <_vfiprintf_r+0x44>
 8004096:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004098:	e71c      	b.n	8003ed4 <_vfiprintf_r+0x48>
 800409a:	ab03      	add	r3, sp, #12
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	462a      	mov	r2, r5
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <_vfiprintf_r+0x22c>)
 80040a2:	a904      	add	r1, sp, #16
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 f879 	bl	800419c <_printf_i>
 80040aa:	e7e4      	b.n	8004076 <_vfiprintf_r+0x1ea>
 80040ac:	080046a8 	.word	0x080046a8
 80040b0:	080046b2 	.word	0x080046b2
 80040b4:	00000000 	.word	0x00000000
 80040b8:	08003e67 	.word	0x08003e67
 80040bc:	080046ae 	.word	0x080046ae

080040c0 <_printf_common>:
 80040c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	4616      	mov	r6, r2
 80040c6:	4699      	mov	r9, r3
 80040c8:	688a      	ldr	r2, [r1, #8]
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d0:	4293      	cmp	r3, r2
 80040d2:	bfb8      	it	lt
 80040d4:	4613      	movlt	r3, r2
 80040d6:	6033      	str	r3, [r6, #0]
 80040d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040dc:	4607      	mov	r7, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	b10a      	cbz	r2, 80040e6 <_printf_common+0x26>
 80040e2:	3301      	adds	r3, #1
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	0699      	lsls	r1, r3, #26
 80040ea:	bf42      	ittt	mi
 80040ec:	6833      	ldrmi	r3, [r6, #0]
 80040ee:	3302      	addmi	r3, #2
 80040f0:	6033      	strmi	r3, [r6, #0]
 80040f2:	6825      	ldr	r5, [r4, #0]
 80040f4:	f015 0506 	ands.w	r5, r5, #6
 80040f8:	d106      	bne.n	8004108 <_printf_common+0x48>
 80040fa:	f104 0a19 	add.w	sl, r4, #25
 80040fe:	68e3      	ldr	r3, [r4, #12]
 8004100:	6832      	ldr	r2, [r6, #0]
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	42ab      	cmp	r3, r5
 8004106:	dc26      	bgt.n	8004156 <_printf_common+0x96>
 8004108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800410c:	1e13      	subs	r3, r2, #0
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	bf18      	it	ne
 8004112:	2301      	movne	r3, #1
 8004114:	0692      	lsls	r2, r2, #26
 8004116:	d42b      	bmi.n	8004170 <_printf_common+0xb0>
 8004118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800411c:	4649      	mov	r1, r9
 800411e:	4638      	mov	r0, r7
 8004120:	47c0      	blx	r8
 8004122:	3001      	adds	r0, #1
 8004124:	d01e      	beq.n	8004164 <_printf_common+0xa4>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	f003 0306 	and.w	r3, r3, #6
 800412e:	2b04      	cmp	r3, #4
 8004130:	bf02      	ittt	eq
 8004132:	68e5      	ldreq	r5, [r4, #12]
 8004134:	6833      	ldreq	r3, [r6, #0]
 8004136:	1aed      	subeq	r5, r5, r3
 8004138:	68a3      	ldr	r3, [r4, #8]
 800413a:	bf0c      	ite	eq
 800413c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004140:	2500      	movne	r5, #0
 8004142:	4293      	cmp	r3, r2
 8004144:	bfc4      	itt	gt
 8004146:	1a9b      	subgt	r3, r3, r2
 8004148:	18ed      	addgt	r5, r5, r3
 800414a:	2600      	movs	r6, #0
 800414c:	341a      	adds	r4, #26
 800414e:	42b5      	cmp	r5, r6
 8004150:	d11a      	bne.n	8004188 <_printf_common+0xc8>
 8004152:	2000      	movs	r0, #0
 8004154:	e008      	b.n	8004168 <_printf_common+0xa8>
 8004156:	2301      	movs	r3, #1
 8004158:	4652      	mov	r2, sl
 800415a:	4649      	mov	r1, r9
 800415c:	4638      	mov	r0, r7
 800415e:	47c0      	blx	r8
 8004160:	3001      	adds	r0, #1
 8004162:	d103      	bne.n	800416c <_printf_common+0xac>
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416c:	3501      	adds	r5, #1
 800416e:	e7c6      	b.n	80040fe <_printf_common+0x3e>
 8004170:	18e1      	adds	r1, r4, r3
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	2030      	movs	r0, #48	; 0x30
 8004176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800417a:	4422      	add	r2, r4
 800417c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004184:	3302      	adds	r3, #2
 8004186:	e7c7      	b.n	8004118 <_printf_common+0x58>
 8004188:	2301      	movs	r3, #1
 800418a:	4622      	mov	r2, r4
 800418c:	4649      	mov	r1, r9
 800418e:	4638      	mov	r0, r7
 8004190:	47c0      	blx	r8
 8004192:	3001      	adds	r0, #1
 8004194:	d0e6      	beq.n	8004164 <_printf_common+0xa4>
 8004196:	3601      	adds	r6, #1
 8004198:	e7d9      	b.n	800414e <_printf_common+0x8e>
	...

0800419c <_printf_i>:
 800419c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	7e0f      	ldrb	r7, [r1, #24]
 80041a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041a4:	2f78      	cmp	r7, #120	; 0x78
 80041a6:	4691      	mov	r9, r2
 80041a8:	4680      	mov	r8, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	469a      	mov	sl, r3
 80041ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041b2:	d807      	bhi.n	80041c4 <_printf_i+0x28>
 80041b4:	2f62      	cmp	r7, #98	; 0x62
 80041b6:	d80a      	bhi.n	80041ce <_printf_i+0x32>
 80041b8:	2f00      	cmp	r7, #0
 80041ba:	f000 80d4 	beq.w	8004366 <_printf_i+0x1ca>
 80041be:	2f58      	cmp	r7, #88	; 0x58
 80041c0:	f000 80c0 	beq.w	8004344 <_printf_i+0x1a8>
 80041c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041cc:	e03a      	b.n	8004244 <_printf_i+0xa8>
 80041ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041d2:	2b15      	cmp	r3, #21
 80041d4:	d8f6      	bhi.n	80041c4 <_printf_i+0x28>
 80041d6:	a101      	add	r1, pc, #4	; (adr r1, 80041dc <_printf_i+0x40>)
 80041d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041dc:	08004235 	.word	0x08004235
 80041e0:	08004249 	.word	0x08004249
 80041e4:	080041c5 	.word	0x080041c5
 80041e8:	080041c5 	.word	0x080041c5
 80041ec:	080041c5 	.word	0x080041c5
 80041f0:	080041c5 	.word	0x080041c5
 80041f4:	08004249 	.word	0x08004249
 80041f8:	080041c5 	.word	0x080041c5
 80041fc:	080041c5 	.word	0x080041c5
 8004200:	080041c5 	.word	0x080041c5
 8004204:	080041c5 	.word	0x080041c5
 8004208:	0800434d 	.word	0x0800434d
 800420c:	08004275 	.word	0x08004275
 8004210:	08004307 	.word	0x08004307
 8004214:	080041c5 	.word	0x080041c5
 8004218:	080041c5 	.word	0x080041c5
 800421c:	0800436f 	.word	0x0800436f
 8004220:	080041c5 	.word	0x080041c5
 8004224:	08004275 	.word	0x08004275
 8004228:	080041c5 	.word	0x080041c5
 800422c:	080041c5 	.word	0x080041c5
 8004230:	0800430f 	.word	0x0800430f
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	602a      	str	r2, [r5, #0]
 800423c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004244:	2301      	movs	r3, #1
 8004246:	e09f      	b.n	8004388 <_printf_i+0x1ec>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	0607      	lsls	r7, r0, #24
 800424e:	f103 0104 	add.w	r1, r3, #4
 8004252:	6029      	str	r1, [r5, #0]
 8004254:	d501      	bpl.n	800425a <_printf_i+0xbe>
 8004256:	681e      	ldr	r6, [r3, #0]
 8004258:	e003      	b.n	8004262 <_printf_i+0xc6>
 800425a:	0646      	lsls	r6, r0, #25
 800425c:	d5fb      	bpl.n	8004256 <_printf_i+0xba>
 800425e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004262:	2e00      	cmp	r6, #0
 8004264:	da03      	bge.n	800426e <_printf_i+0xd2>
 8004266:	232d      	movs	r3, #45	; 0x2d
 8004268:	4276      	negs	r6, r6
 800426a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426e:	485a      	ldr	r0, [pc, #360]	; (80043d8 <_printf_i+0x23c>)
 8004270:	230a      	movs	r3, #10
 8004272:	e012      	b.n	800429a <_printf_i+0xfe>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	6029      	str	r1, [r5, #0]
 800427c:	0605      	lsls	r5, r0, #24
 800427e:	d501      	bpl.n	8004284 <_printf_i+0xe8>
 8004280:	681e      	ldr	r6, [r3, #0]
 8004282:	e002      	b.n	800428a <_printf_i+0xee>
 8004284:	0641      	lsls	r1, r0, #25
 8004286:	d5fb      	bpl.n	8004280 <_printf_i+0xe4>
 8004288:	881e      	ldrh	r6, [r3, #0]
 800428a:	4853      	ldr	r0, [pc, #332]	; (80043d8 <_printf_i+0x23c>)
 800428c:	2f6f      	cmp	r7, #111	; 0x6f
 800428e:	bf0c      	ite	eq
 8004290:	2308      	moveq	r3, #8
 8004292:	230a      	movne	r3, #10
 8004294:	2100      	movs	r1, #0
 8004296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800429a:	6865      	ldr	r5, [r4, #4]
 800429c:	60a5      	str	r5, [r4, #8]
 800429e:	2d00      	cmp	r5, #0
 80042a0:	bfa2      	ittt	ge
 80042a2:	6821      	ldrge	r1, [r4, #0]
 80042a4:	f021 0104 	bicge.w	r1, r1, #4
 80042a8:	6021      	strge	r1, [r4, #0]
 80042aa:	b90e      	cbnz	r6, 80042b0 <_printf_i+0x114>
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d04b      	beq.n	8004348 <_printf_i+0x1ac>
 80042b0:	4615      	mov	r5, r2
 80042b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042b6:	fb03 6711 	mls	r7, r3, r1, r6
 80042ba:	5dc7      	ldrb	r7, [r0, r7]
 80042bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042c0:	4637      	mov	r7, r6
 80042c2:	42bb      	cmp	r3, r7
 80042c4:	460e      	mov	r6, r1
 80042c6:	d9f4      	bls.n	80042b2 <_printf_i+0x116>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d10b      	bne.n	80042e4 <_printf_i+0x148>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	07de      	lsls	r6, r3, #31
 80042d0:	d508      	bpl.n	80042e4 <_printf_i+0x148>
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	6861      	ldr	r1, [r4, #4]
 80042d6:	4299      	cmp	r1, r3
 80042d8:	bfde      	ittt	le
 80042da:	2330      	movle	r3, #48	; 0x30
 80042dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042e4:	1b52      	subs	r2, r2, r5
 80042e6:	6122      	str	r2, [r4, #16]
 80042e8:	f8cd a000 	str.w	sl, [sp]
 80042ec:	464b      	mov	r3, r9
 80042ee:	aa03      	add	r2, sp, #12
 80042f0:	4621      	mov	r1, r4
 80042f2:	4640      	mov	r0, r8
 80042f4:	f7ff fee4 	bl	80040c0 <_printf_common>
 80042f8:	3001      	adds	r0, #1
 80042fa:	d14a      	bne.n	8004392 <_printf_i+0x1f6>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	b004      	add	sp, #16
 8004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	4833      	ldr	r0, [pc, #204]	; (80043dc <_printf_i+0x240>)
 8004310:	2778      	movs	r7, #120	; 0x78
 8004312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	6829      	ldr	r1, [r5, #0]
 800431a:	061f      	lsls	r7, r3, #24
 800431c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004320:	d402      	bmi.n	8004328 <_printf_i+0x18c>
 8004322:	065f      	lsls	r7, r3, #25
 8004324:	bf48      	it	mi
 8004326:	b2b6      	uxthmi	r6, r6
 8004328:	07df      	lsls	r7, r3, #31
 800432a:	bf48      	it	mi
 800432c:	f043 0320 	orrmi.w	r3, r3, #32
 8004330:	6029      	str	r1, [r5, #0]
 8004332:	bf48      	it	mi
 8004334:	6023      	strmi	r3, [r4, #0]
 8004336:	b91e      	cbnz	r6, 8004340 <_printf_i+0x1a4>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	f023 0320 	bic.w	r3, r3, #32
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	2310      	movs	r3, #16
 8004342:	e7a7      	b.n	8004294 <_printf_i+0xf8>
 8004344:	4824      	ldr	r0, [pc, #144]	; (80043d8 <_printf_i+0x23c>)
 8004346:	e7e4      	b.n	8004312 <_printf_i+0x176>
 8004348:	4615      	mov	r5, r2
 800434a:	e7bd      	b.n	80042c8 <_printf_i+0x12c>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	6826      	ldr	r6, [r4, #0]
 8004350:	6961      	ldr	r1, [r4, #20]
 8004352:	1d18      	adds	r0, r3, #4
 8004354:	6028      	str	r0, [r5, #0]
 8004356:	0635      	lsls	r5, r6, #24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	d501      	bpl.n	8004360 <_printf_i+0x1c4>
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0x1ca>
 8004360:	0670      	lsls	r0, r6, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0x1c0>
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	4615      	mov	r5, r2
 800436c:	e7bc      	b.n	80042e8 <_printf_i+0x14c>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	602a      	str	r2, [r5, #0]
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	4628      	mov	r0, r5
 800437c:	f7fb ff50 	bl	8000220 <memchr>
 8004380:	b108      	cbz	r0, 8004386 <_printf_i+0x1ea>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	e7aa      	b.n	80042e8 <_printf_i+0x14c>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	462a      	mov	r2, r5
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	47d0      	blx	sl
 800439c:	3001      	adds	r0, #1
 800439e:	d0ad      	beq.n	80042fc <_printf_i+0x160>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	079b      	lsls	r3, r3, #30
 80043a4:	d413      	bmi.n	80043ce <_printf_i+0x232>
 80043a6:	68e0      	ldr	r0, [r4, #12]
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	4298      	cmp	r0, r3
 80043ac:	bfb8      	it	lt
 80043ae:	4618      	movlt	r0, r3
 80043b0:	e7a6      	b.n	8004300 <_printf_i+0x164>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d09d      	beq.n	80042fc <_printf_i+0x160>
 80043c0:	3501      	adds	r5, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	9903      	ldr	r1, [sp, #12]
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dcf2      	bgt.n	80043b2 <_printf_i+0x216>
 80043cc:	e7eb      	b.n	80043a6 <_printf_i+0x20a>
 80043ce:	2500      	movs	r5, #0
 80043d0:	f104 0619 	add.w	r6, r4, #25
 80043d4:	e7f5      	b.n	80043c2 <_printf_i+0x226>
 80043d6:	bf00      	nop
 80043d8:	080046b9 	.word	0x080046b9
 80043dc:	080046ca 	.word	0x080046ca

080043e0 <__sflush_r>:
 80043e0:	898a      	ldrh	r2, [r1, #12]
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e6:	4605      	mov	r5, r0
 80043e8:	0710      	lsls	r0, r2, #28
 80043ea:	460c      	mov	r4, r1
 80043ec:	d458      	bmi.n	80044a0 <__sflush_r+0xc0>
 80043ee:	684b      	ldr	r3, [r1, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dc05      	bgt.n	8004400 <__sflush_r+0x20>
 80043f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dc02      	bgt.n	8004400 <__sflush_r+0x20>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004402:	2e00      	cmp	r6, #0
 8004404:	d0f9      	beq.n	80043fa <__sflush_r+0x1a>
 8004406:	2300      	movs	r3, #0
 8004408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800440c:	682f      	ldr	r7, [r5, #0]
 800440e:	6a21      	ldr	r1, [r4, #32]
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	d032      	beq.n	800447a <__sflush_r+0x9a>
 8004414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	075a      	lsls	r2, r3, #29
 800441a:	d505      	bpl.n	8004428 <__sflush_r+0x48>
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	1ac0      	subs	r0, r0, r3
 8004420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004422:	b10b      	cbz	r3, 8004428 <__sflush_r+0x48>
 8004424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004426:	1ac0      	subs	r0, r0, r3
 8004428:	2300      	movs	r3, #0
 800442a:	4602      	mov	r2, r0
 800442c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800442e:	6a21      	ldr	r1, [r4, #32]
 8004430:	4628      	mov	r0, r5
 8004432:	47b0      	blx	r6
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	d106      	bne.n	8004448 <__sflush_r+0x68>
 800443a:	6829      	ldr	r1, [r5, #0]
 800443c:	291d      	cmp	r1, #29
 800443e:	d82b      	bhi.n	8004498 <__sflush_r+0xb8>
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <__sflush_r+0x108>)
 8004442:	410a      	asrs	r2, r1
 8004444:	07d6      	lsls	r6, r2, #31
 8004446:	d427      	bmi.n	8004498 <__sflush_r+0xb8>
 8004448:	2200      	movs	r2, #0
 800444a:	6062      	str	r2, [r4, #4]
 800444c:	04d9      	lsls	r1, r3, #19
 800444e:	6922      	ldr	r2, [r4, #16]
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	d504      	bpl.n	800445e <__sflush_r+0x7e>
 8004454:	1c42      	adds	r2, r0, #1
 8004456:	d101      	bne.n	800445c <__sflush_r+0x7c>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b903      	cbnz	r3, 800445e <__sflush_r+0x7e>
 800445c:	6560      	str	r0, [r4, #84]	; 0x54
 800445e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004460:	602f      	str	r7, [r5, #0]
 8004462:	2900      	cmp	r1, #0
 8004464:	d0c9      	beq.n	80043fa <__sflush_r+0x1a>
 8004466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800446a:	4299      	cmp	r1, r3
 800446c:	d002      	beq.n	8004474 <__sflush_r+0x94>
 800446e:	4628      	mov	r0, r5
 8004470:	f7ff fbea 	bl	8003c48 <_free_r>
 8004474:	2000      	movs	r0, #0
 8004476:	6360      	str	r0, [r4, #52]	; 0x34
 8004478:	e7c0      	b.n	80043fc <__sflush_r+0x1c>
 800447a:	2301      	movs	r3, #1
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	1c41      	adds	r1, r0, #1
 8004482:	d1c8      	bne.n	8004416 <__sflush_r+0x36>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0c5      	beq.n	8004416 <__sflush_r+0x36>
 800448a:	2b1d      	cmp	r3, #29
 800448c:	d001      	beq.n	8004492 <__sflush_r+0xb2>
 800448e:	2b16      	cmp	r3, #22
 8004490:	d101      	bne.n	8004496 <__sflush_r+0xb6>
 8004492:	602f      	str	r7, [r5, #0]
 8004494:	e7b1      	b.n	80043fa <__sflush_r+0x1a>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	e7ad      	b.n	80043fc <__sflush_r+0x1c>
 80044a0:	690f      	ldr	r7, [r1, #16]
 80044a2:	2f00      	cmp	r7, #0
 80044a4:	d0a9      	beq.n	80043fa <__sflush_r+0x1a>
 80044a6:	0793      	lsls	r3, r2, #30
 80044a8:	680e      	ldr	r6, [r1, #0]
 80044aa:	bf08      	it	eq
 80044ac:	694b      	ldreq	r3, [r1, #20]
 80044ae:	600f      	str	r7, [r1, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2300      	movne	r3, #0
 80044b4:	eba6 0807 	sub.w	r8, r6, r7
 80044b8:	608b      	str	r3, [r1, #8]
 80044ba:	f1b8 0f00 	cmp.w	r8, #0
 80044be:	dd9c      	ble.n	80043fa <__sflush_r+0x1a>
 80044c0:	6a21      	ldr	r1, [r4, #32]
 80044c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044c4:	4643      	mov	r3, r8
 80044c6:	463a      	mov	r2, r7
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b0      	blx	r6
 80044cc:	2800      	cmp	r0, #0
 80044ce:	dc06      	bgt.n	80044de <__sflush_r+0xfe>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e78e      	b.n	80043fc <__sflush_r+0x1c>
 80044de:	4407      	add	r7, r0
 80044e0:	eba8 0800 	sub.w	r8, r8, r0
 80044e4:	e7e9      	b.n	80044ba <__sflush_r+0xda>
 80044e6:	bf00      	nop
 80044e8:	dfbffffe 	.word	0xdfbffffe

080044ec <_fflush_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	690b      	ldr	r3, [r1, #16]
 80044f0:	4605      	mov	r5, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	b913      	cbnz	r3, 80044fc <_fflush_r+0x10>
 80044f6:	2500      	movs	r5, #0
 80044f8:	4628      	mov	r0, r5
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	b118      	cbz	r0, 8004506 <_fflush_r+0x1a>
 80044fe:	6a03      	ldr	r3, [r0, #32]
 8004500:	b90b      	cbnz	r3, 8004506 <_fflush_r+0x1a>
 8004502:	f7ff f9a9 	bl	8003858 <__sinit>
 8004506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f3      	beq.n	80044f6 <_fflush_r+0xa>
 800450e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004510:	07d0      	lsls	r0, r2, #31
 8004512:	d404      	bmi.n	800451e <_fflush_r+0x32>
 8004514:	0599      	lsls	r1, r3, #22
 8004516:	d402      	bmi.n	800451e <_fflush_r+0x32>
 8004518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800451a:	f7ff fb92 	bl	8003c42 <__retarget_lock_acquire_recursive>
 800451e:	4628      	mov	r0, r5
 8004520:	4621      	mov	r1, r4
 8004522:	f7ff ff5d 	bl	80043e0 <__sflush_r>
 8004526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004528:	07da      	lsls	r2, r3, #31
 800452a:	4605      	mov	r5, r0
 800452c:	d4e4      	bmi.n	80044f8 <_fflush_r+0xc>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	059b      	lsls	r3, r3, #22
 8004532:	d4e1      	bmi.n	80044f8 <_fflush_r+0xc>
 8004534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004536:	f7ff fb85 	bl	8003c44 <__retarget_lock_release_recursive>
 800453a:	e7dd      	b.n	80044f8 <_fflush_r+0xc>

0800453c <__swhatbuf_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	460c      	mov	r4, r1
 8004540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004544:	2900      	cmp	r1, #0
 8004546:	b096      	sub	sp, #88	; 0x58
 8004548:	4615      	mov	r5, r2
 800454a:	461e      	mov	r6, r3
 800454c:	da0d      	bge.n	800456a <__swhatbuf_r+0x2e>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	bf0c      	ite	eq
 800455a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800455e:	2340      	movne	r3, #64	; 0x40
 8004560:	2000      	movs	r0, #0
 8004562:	6031      	str	r1, [r6, #0]
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	b016      	add	sp, #88	; 0x58
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	466a      	mov	r2, sp
 800456c:	f000 f848 	bl	8004600 <_fstat_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	dbec      	blt.n	800454e <__swhatbuf_r+0x12>
 8004574:	9901      	ldr	r1, [sp, #4]
 8004576:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800457a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800457e:	4259      	negs	r1, r3
 8004580:	4159      	adcs	r1, r3
 8004582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004586:	e7eb      	b.n	8004560 <__swhatbuf_r+0x24>

08004588 <__smakebuf_r>:
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800458c:	079d      	lsls	r5, r3, #30
 800458e:	4606      	mov	r6, r0
 8004590:	460c      	mov	r4, r1
 8004592:	d507      	bpl.n	80045a4 <__smakebuf_r+0x1c>
 8004594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2301      	movs	r3, #1
 800459e:	6163      	str	r3, [r4, #20]
 80045a0:	b002      	add	sp, #8
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	ab01      	add	r3, sp, #4
 80045a6:	466a      	mov	r2, sp
 80045a8:	f7ff ffc8 	bl	800453c <__swhatbuf_r>
 80045ac:	9900      	ldr	r1, [sp, #0]
 80045ae:	4605      	mov	r5, r0
 80045b0:	4630      	mov	r0, r6
 80045b2:	f7ff fbb5 	bl	8003d20 <_malloc_r>
 80045b6:	b948      	cbnz	r0, 80045cc <__smakebuf_r+0x44>
 80045b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045bc:	059a      	lsls	r2, r3, #22
 80045be:	d4ef      	bmi.n	80045a0 <__smakebuf_r+0x18>
 80045c0:	f023 0303 	bic.w	r3, r3, #3
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	e7e3      	b.n	8004594 <__smakebuf_r+0xc>
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	6020      	str	r0, [r4, #0]
 80045d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	9b00      	ldr	r3, [sp, #0]
 80045d8:	6163      	str	r3, [r4, #20]
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	6120      	str	r0, [r4, #16]
 80045de:	b15b      	cbz	r3, 80045f8 <__smakebuf_r+0x70>
 80045e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f81d 	bl	8004624 <_isatty_r>
 80045ea:	b128      	cbz	r0, 80045f8 <__smakebuf_r+0x70>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	431d      	orrs	r5, r3
 80045fc:	81a5      	strh	r5, [r4, #12]
 80045fe:	e7cf      	b.n	80045a0 <__smakebuf_r+0x18>

08004600 <_fstat_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d07      	ldr	r5, [pc, #28]	; (8004620 <_fstat_r+0x20>)
 8004604:	2300      	movs	r3, #0
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	f7fc fbb2 	bl	8000d76 <_fstat>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d102      	bne.n	800461c <_fstat_r+0x1c>
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	b103      	cbz	r3, 800461c <_fstat_r+0x1c>
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	200002e0 	.word	0x200002e0

08004624 <_isatty_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d06      	ldr	r5, [pc, #24]	; (8004640 <_isatty_r+0x1c>)
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fc fbb1 	bl	8000d96 <_isatty>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_isatty_r+0x1a>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_isatty_r+0x1a>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	200002e0 	.word	0x200002e0

08004644 <_sbrk_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d06      	ldr	r5, [pc, #24]	; (8004660 <_sbrk_r+0x1c>)
 8004648:	2300      	movs	r3, #0
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fc fbba 	bl	8000dc8 <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_sbrk_r+0x1a>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_sbrk_r+0x1a>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200002e0 	.word	0x200002e0

08004664 <_init>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr

08004670 <_fini>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr
